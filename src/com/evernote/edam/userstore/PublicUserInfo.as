/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.userstore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.PrivilegeLevel;

  /**
   *  This structure is used to provide publicly-available user information
   *  about a particular account.
   * <dl>
   *  <dt>userId:</dt>
   *    <dd>
   *    The unique numeric user identifier for the user account.
   *    </dd>
   *  <dt>shardId:</dt>
   *    <dd>
   *    The name of the virtual server that manages the state of
   *    this user. This value is used internally to determine which system should
   *    service requests about this user's data.
   *    </dd>
   *  <dt>privilege:</dt>
   *    <dd>
   *    The privilege level of the account, to determine whether
   *    this is a Premium or Free account.
   *    </dd>
   *  <dt>noteStoreUrl:</dt>
   *    <dd>
   *    This field will contain the full URL that clients should use to make
   *    NoteStore requests to the server shard that contains that user's data.
   *    I.e. this is the URL that should be used to create the Thrift HTTP client
   *    transport to send messages to the NoteStore service for the account.
   *    </dd>
   *  </dl>
   */
  public class PublicUserInfo implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("PublicUserInfo");
    private static const USER_ID_FIELD_DESC:TField = new TField("userId", TType.I32, 1);
    private static const SHARD_ID_FIELD_DESC:TField = new TField("shardId", TType.STRING, 2);
    private static const PRIVILEGE_FIELD_DESC:TField = new TField("privilege", TType.I32, 3);
    private static const USERNAME_FIELD_DESC:TField = new TField("username", TType.STRING, 4);
    private static const NOTE_STORE_URL_FIELD_DESC:TField = new TField("noteStoreUrl", TType.STRING, 5);

    private var _userId:int;
    public static const USERID:int = 1;
    private var _shardId:String;
    public static const SHARDID:int = 2;
    private var _privilege:int;
    public static const PRIVILEGE:int = 3;
    private var _username:String;
    public static const USERNAME:int = 4;
    private var _noteStoreUrl:String;
    public static const NOTESTOREURL:int = 5;

    private var __isset_userId:Boolean = false;
    private var __isset_privilege:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[USERID] = new FieldMetaData("userId", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[SHARDID] = new FieldMetaData("shardId", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PRIVILEGE] = new FieldMetaData("privilege", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[USERNAME] = new FieldMetaData("username", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[NOTESTOREURL] = new FieldMetaData("noteStoreUrl", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(PublicUserInfo, metaDataMap);
    }

    public function PublicUserInfo() {
    }

    public function get userId():int {
      return this._userId;
    }

    public function set userId(userId:int):void {
      this._userId = userId;
      this.__isset_userId = true;
    }

    public function unsetUserId():void {
      this.__isset_userId = false;
    }

    // Returns true if field userId is set (has been assigned a value) and false otherwise
    public function isSetUserId():Boolean {
      return this.__isset_userId;
    }

    public function get shardId():String {
      return this._shardId;
    }

    public function set shardId(shardId:String):void {
      this._shardId = shardId;
    }

    public function unsetShardId():void {
      this.shardId = null;
    }

    // Returns true if field shardId is set (has been assigned a value) and false otherwise
    public function isSetShardId():Boolean {
      return this.shardId != null;
    }

    public function get privilege():int {
      return this._privilege;
    }

    public function set privilege(privilege:int):void {
      this._privilege = privilege;
      this.__isset_privilege = true;
    }

    public function unsetPrivilege():void {
      this.__isset_privilege = false;
    }

    // Returns true if field privilege is set (has been assigned a value) and false otherwise
    public function isSetPrivilege():Boolean {
      return this.__isset_privilege;
    }

    public function get username():String {
      return this._username;
    }

    public function set username(username:String):void {
      this._username = username;
    }

    public function unsetUsername():void {
      this.username = null;
    }

    // Returns true if field username is set (has been assigned a value) and false otherwise
    public function isSetUsername():Boolean {
      return this.username != null;
    }

    public function get noteStoreUrl():String {
      return this._noteStoreUrl;
    }

    public function set noteStoreUrl(noteStoreUrl:String):void {
      this._noteStoreUrl = noteStoreUrl;
    }

    public function unsetNoteStoreUrl():void {
      this.noteStoreUrl = null;
    }

    // Returns true if field noteStoreUrl is set (has been assigned a value) and false otherwise
    public function isSetNoteStoreUrl():Boolean {
      return this.noteStoreUrl != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case USERID:
        if (value == null) {
          unsetUserId();
        } else {
          this.userId = value;
        }
        break;

      case SHARDID:
        if (value == null) {
          unsetShardId();
        } else {
          this.shardId = value;
        }
        break;

      case PRIVILEGE:
        if (value == null) {
          unsetPrivilege();
        } else {
          this.privilege = value;
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          this.username = value;
        }
        break;

      case NOTESTOREURL:
        if (value == null) {
          unsetNoteStoreUrl();
        } else {
          this.noteStoreUrl = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case USERID:
        return this.userId;
      case SHARDID:
        return this.shardId;
      case PRIVILEGE:
        return this.privilege;
      case USERNAME:
        return this.username;
      case NOTESTOREURL:
        return this.noteStoreUrl;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case USERID:
        return isSetUserId();
      case SHARDID:
        return isSetShardId();
      case PRIVILEGE:
        return isSetPrivilege();
      case USERNAME:
        return isSetUsername();
      case NOTESTOREURL:
        return isSetNoteStoreUrl();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case USERID:
            if (field.type == TType.I32) {
              this.userId = iprot.readI32();
              this.__isset_userId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SHARDID:
            if (field.type == TType.STRING) {
              this.shardId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGE:
            if (field.type == TType.I32) {
              this.privilege = iprot.readI32();
              this.__isset_privilege = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOTESTOREURL:
            if (field.type == TType.STRING) {
              this.noteStoreUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      if (!__isset_userId) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userId);
      oprot.writeFieldEnd();
      if (this.shardId != null) {
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeString(this.shardId);
        oprot.writeFieldEnd();
      }
      if (isSetPrivilege()) {
        oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
        oprot.writeI32(this.privilege);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        if (isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(this.username);
          oprot.writeFieldEnd();
        }
      }
      if (this.noteStoreUrl != null) {
        if (isSetNoteStoreUrl()) {
          oprot.writeFieldBegin(NOTE_STORE_URL_FIELD_DESC);
          oprot.writeString(this.noteStoreUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("PublicUserInfo(");
      var first:Boolean = true;

      ret += "userId:";
      ret += this.userId;
      first = false;
      if (!first) ret +=  ", ";
      ret += "shardId:";
      if (this.shardId == null) {
        ret += "null";
      } else {
        ret += this.shardId;
      }
      first = false;
      if (isSetPrivilege()) {
        if (!first) ret +=  ", ";
        ret += "privilege:";
        var privilege_name:String = com.evernote.edam.type.PrivilegeLevel.VALUES_TO_NAMES[this.privilege];
        if (privilege_name != null) {
          ret += privilege_name;
          ret += " (";
        }
        ret += this.privilege;
        if (privilege_name != null) {
          ret += ")";
        }
        first = false;
      }
      if (isSetUsername()) {
        if (!first) ret +=  ", ";
        ret += "username:";
        if (this.username == null) {
          ret += "null";
        } else {
          ret += this.username;
        }
        first = false;
      }
      if (isSetNoteStoreUrl()) {
        if (!first) ret +=  ", ";
        ret += "noteStoreUrl:";
        if (this.noteStoreUrl == null) {
          ret += "null";
        } else {
          ret += this.noteStoreUrl;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
      if (shardId == null) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'shardId' was not present! Struct: " + toString());
      }
      // check that fields of type enum have valid values
      if (isSetPrivilege() && !com.evernote.edam.type.PrivilegeLevel.VALID_VALUES.contains(privilege)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'privilege' has been assigned the invalid value " + privilege);
      }
    }

  }

}
