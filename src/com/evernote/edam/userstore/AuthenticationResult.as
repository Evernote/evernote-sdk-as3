/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.userstore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.User;
import com.evernote.edam.userstore.PublicUserInfo;

  /**
   *  When an authentication (or re-authentication) is performed, this structure
   *  provides the result to the client.
   * <dl>
   *  <dt>currentTime:</dt>
   *    <dd>
   *    The server-side date and time when this result was
   *    generated.
   *    </dd>
   *  <dt>authenticationToken:</dt>
   *    <dd>
   *    Holds an opaque, ASCII-encoded token that can be
   *    used by the client to perform actions on a NoteStore.
   *    </dd>
   *  <dt>expiration:</dt>
   *    <dd>
   *    Holds the server-side date and time when the
   *    authentication token will expire.
   *    This time can be compared to "currentTime" to produce an expiration
   *    time that can be reconciled with the client's local clock.
   *    </dd>
   *  <dt>user:</dt>
   *    <dd>
   *    Holds the information about the account which was
   *    authenticated if this was a full authentication.  May be absent if this
   *    particular authentication did not require user information.
   *    </dd>
   *  <dt>publicUserInfo:</dt>
   *    <dd>
   *    If this authentication result was achieved without full permissions to
   *    access the full User structure, this field may be set to give back
   *    a more limited public set of data.
   *    </dd>
   *  <dt>noteStoreUrl:</dt>
   *    <dd>
   *    This field will contain the full URL that clients should use to make
   *    NoteStore requests to the server shard that contains that user's data.
   *    I.e. this is the URL that should be used to create the Thrift HTTP client
   *    transport to send messages to the NoteStore service for the account.
   *    </dd>
   *  <dt>webApiUrlPrefix:</dt>
   *    <dd>
   *    This field will contain the initial part of the URLs that should be used
   *    to make requests to Evernote's thin client "web API", which provide
   *    optimized operations for clients that aren't capable of manipulating
   *    the full contents of accounts via the full Thrift data model. Clients
   *    should concatenate the relative path for the various servlets onto the
   *    end of this string to construct the full URL, as documented on our
   *    developer web site.
   *    </dd>
   *  </dl>
   */
  public class AuthenticationResult implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("AuthenticationResult");
    private static const CURRENT_TIME_FIELD_DESC:TField = new TField("currentTime", TType.I64, 1);
    private static const AUTHENTICATION_TOKEN_FIELD_DESC:TField = new TField("authenticationToken", TType.STRING, 2);
    private static const EXPIRATION_FIELD_DESC:TField = new TField("expiration", TType.I64, 3);
    private static const USER_FIELD_DESC:TField = new TField("user", TType.STRUCT, 4);
    private static const PUBLIC_USER_INFO_FIELD_DESC:TField = new TField("publicUserInfo", TType.STRUCT, 5);
    private static const NOTE_STORE_URL_FIELD_DESC:TField = new TField("noteStoreUrl", TType.STRING, 6);
    private static const WEB_API_URL_PREFIX_FIELD_DESC:TField = new TField("webApiUrlPrefix", TType.STRING, 7);

    private var _currentTime:BigInteger;
    public static const CURRENTTIME:int = 1;
    private var _authenticationToken:String;
    public static const AUTHENTICATIONTOKEN:int = 2;
    private var _expiration:BigInteger;
    public static const EXPIRATION:int = 3;
    private var _user:User;
    public static const USER:int = 4;
    private var _publicUserInfo:PublicUserInfo;
    public static const PUBLICUSERINFO:int = 5;
    private var _noteStoreUrl:String;
    public static const NOTESTOREURL:int = 6;
    private var _webApiUrlPrefix:String;
    public static const WEBAPIURLPREFIX:int = 7;

    private var __isset_currentTime:Boolean = false;
    private var __isset_expiration:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[CURRENTTIME] = new FieldMetaData("currentTime", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[AUTHENTICATIONTOKEN] = new FieldMetaData("authenticationToken", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[EXPIRATION] = new FieldMetaData("expiration", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[USER] = new FieldMetaData("user", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, User));
      metaDataMap[PUBLICUSERINFO] = new FieldMetaData("publicUserInfo", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, PublicUserInfo));
      metaDataMap[NOTESTOREURL] = new FieldMetaData("noteStoreUrl", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[WEBAPIURLPREFIX] = new FieldMetaData("webApiUrlPrefix", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(AuthenticationResult, metaDataMap);
    }

    public function AuthenticationResult() {
    }

    public function get currentTime():BigInteger {
      return this._currentTime;
    }

    public function set currentTime(currentTime:BigInteger):void {
      this._currentTime = currentTime;
      this.__isset_currentTime = true;
    }

    public function unsetCurrentTime():void {
      this.__isset_currentTime = false;
    }

    // Returns true if field currentTime is set (has been assigned a value) and false otherwise
    public function isSetCurrentTime():Boolean {
      return this.__isset_currentTime;
    }

    public function get authenticationToken():String {
      return this._authenticationToken;
    }

    public function set authenticationToken(authenticationToken:String):void {
      this._authenticationToken = authenticationToken;
    }

    public function unsetAuthenticationToken():void {
      this.authenticationToken = null;
    }

    // Returns true if field authenticationToken is set (has been assigned a value) and false otherwise
    public function isSetAuthenticationToken():Boolean {
      return this.authenticationToken != null;
    }

    public function get expiration():BigInteger {
      return this._expiration;
    }

    public function set expiration(expiration:BigInteger):void {
      this._expiration = expiration;
      this.__isset_expiration = true;
    }

    public function unsetExpiration():void {
      this.__isset_expiration = false;
    }

    // Returns true if field expiration is set (has been assigned a value) and false otherwise
    public function isSetExpiration():Boolean {
      return this.__isset_expiration;
    }

    public function get user():User {
      return this._user;
    }

    public function set user(user:User):void {
      this._user = user;
    }

    public function unsetUser():void {
      this.user = null;
    }

    // Returns true if field user is set (has been assigned a value) and false otherwise
    public function isSetUser():Boolean {
      return this.user != null;
    }

    public function get publicUserInfo():PublicUserInfo {
      return this._publicUserInfo;
    }

    public function set publicUserInfo(publicUserInfo:PublicUserInfo):void {
      this._publicUserInfo = publicUserInfo;
    }

    public function unsetPublicUserInfo():void {
      this.publicUserInfo = null;
    }

    // Returns true if field publicUserInfo is set (has been assigned a value) and false otherwise
    public function isSetPublicUserInfo():Boolean {
      return this.publicUserInfo != null;
    }

    public function get noteStoreUrl():String {
      return this._noteStoreUrl;
    }

    public function set noteStoreUrl(noteStoreUrl:String):void {
      this._noteStoreUrl = noteStoreUrl;
    }

    public function unsetNoteStoreUrl():void {
      this.noteStoreUrl = null;
    }

    // Returns true if field noteStoreUrl is set (has been assigned a value) and false otherwise
    public function isSetNoteStoreUrl():Boolean {
      return this.noteStoreUrl != null;
    }

    public function get webApiUrlPrefix():String {
      return this._webApiUrlPrefix;
    }

    public function set webApiUrlPrefix(webApiUrlPrefix:String):void {
      this._webApiUrlPrefix = webApiUrlPrefix;
    }

    public function unsetWebApiUrlPrefix():void {
      this.webApiUrlPrefix = null;
    }

    // Returns true if field webApiUrlPrefix is set (has been assigned a value) and false otherwise
    public function isSetWebApiUrlPrefix():Boolean {
      return this.webApiUrlPrefix != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case CURRENTTIME:
        if (value == null) {
          unsetCurrentTime();
        } else {
          this.currentTime = value;
        }
        break;

      case AUTHENTICATIONTOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          this.authenticationToken = value;
        }
        break;

      case EXPIRATION:
        if (value == null) {
          unsetExpiration();
        } else {
          this.expiration = value;
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          this.user = value;
        }
        break;

      case PUBLICUSERINFO:
        if (value == null) {
          unsetPublicUserInfo();
        } else {
          this.publicUserInfo = value;
        }
        break;

      case NOTESTOREURL:
        if (value == null) {
          unsetNoteStoreUrl();
        } else {
          this.noteStoreUrl = value;
        }
        break;

      case WEBAPIURLPREFIX:
        if (value == null) {
          unsetWebApiUrlPrefix();
        } else {
          this.webApiUrlPrefix = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case CURRENTTIME:
        return this.currentTime;
      case AUTHENTICATIONTOKEN:
        return this.authenticationToken;
      case EXPIRATION:
        return this.expiration;
      case USER:
        return this.user;
      case PUBLICUSERINFO:
        return this.publicUserInfo;
      case NOTESTOREURL:
        return this.noteStoreUrl;
      case WEBAPIURLPREFIX:
        return this.webApiUrlPrefix;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case CURRENTTIME:
        return isSetCurrentTime();
      case AUTHENTICATIONTOKEN:
        return isSetAuthenticationToken();
      case EXPIRATION:
        return isSetExpiration();
      case USER:
        return isSetUser();
      case PUBLICUSERINFO:
        return isSetPublicUserInfo();
      case NOTESTOREURL:
        return isSetNoteStoreUrl();
      case WEBAPIURLPREFIX:
        return isSetWebApiUrlPrefix();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CURRENTTIME:
            if (field.type == TType.I64) {
              this.currentTime = iprot.readI64();
              this.__isset_currentTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case AUTHENTICATIONTOKEN:
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EXPIRATION:
            if (field.type == TType.I64) {
              this.expiration = iprot.readI64();
              this.__isset_expiration = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USER:
            if (field.type == TType.STRUCT) {
              this.user = new User();
              this.user.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PUBLICUSERINFO:
            if (field.type == TType.STRUCT) {
              this.publicUserInfo = new PublicUserInfo();
              this.publicUserInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOTESTOREURL:
            if (field.type == TType.STRING) {
              this.noteStoreUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WEBAPIURLPREFIX:
            if (field.type == TType.STRING) {
              this.webApiUrlPrefix = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      if (!__isset_currentTime) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'currentTime' was not found in serialized data! Struct: " + toString());
      }
      if (!__isset_expiration) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'expiration' was not found in serialized data! Struct: " + toString());
      }
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CURRENT_TIME_FIELD_DESC);
      oprot.writeI64(this.currentTime);
      oprot.writeFieldEnd();
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRATION_FIELD_DESC);
      oprot.writeI64(this.expiration);
      oprot.writeFieldEnd();
      if (this.user != null) {
        if (isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          this.user.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (this.publicUserInfo != null) {
        if (isSetPublicUserInfo()) {
          oprot.writeFieldBegin(PUBLIC_USER_INFO_FIELD_DESC);
          this.publicUserInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (this.noteStoreUrl != null) {
        if (isSetNoteStoreUrl()) {
          oprot.writeFieldBegin(NOTE_STORE_URL_FIELD_DESC);
          oprot.writeString(this.noteStoreUrl);
          oprot.writeFieldEnd();
        }
      }
      if (this.webApiUrlPrefix != null) {
        if (isSetWebApiUrlPrefix()) {
          oprot.writeFieldBegin(WEB_API_URL_PREFIX_FIELD_DESC);
          oprot.writeString(this.webApiUrlPrefix);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("AuthenticationResult(");
      var first:Boolean = true;

      ret += "currentTime:";
      ret += this.currentTime;
      first = false;
      if (!first) ret +=  ", ";
      ret += "authenticationToken:";
      if (this.authenticationToken == null) {
        ret += "null";
      } else {
        ret += this.authenticationToken;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "expiration:";
      ret += this.expiration;
      first = false;
      if (isSetUser()) {
        if (!first) ret +=  ", ";
        ret += "user:";
        if (this.user == null) {
          ret += "null";
        } else {
          ret += this.user;
        }
        first = false;
      }
      if (isSetPublicUserInfo()) {
        if (!first) ret +=  ", ";
        ret += "publicUserInfo:";
        if (this.publicUserInfo == null) {
          ret += "null";
        } else {
          ret += this.publicUserInfo;
        }
        first = false;
      }
      if (isSetNoteStoreUrl()) {
        if (!first) ret +=  ", ";
        ret += "noteStoreUrl:";
        if (this.noteStoreUrl == null) {
          ret += "null";
        } else {
          ret += this.noteStoreUrl;
        }
        first = false;
      }
      if (isSetWebApiUrlPrefix()) {
        if (!first) ret +=  ", ";
        ret += "webApiUrlPrefix:";
        if (this.webApiUrlPrefix == null) {
          ret += "null";
        } else {
          ret += this.webApiUrlPrefix;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // alas, we cannot check 'currentTime' because it's a primitive and you chose the non-beans generator.
      if (authenticationToken == null) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'authenticationToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'expiration' because it's a primitive and you chose the non-beans generator.
      // check that fields of type enum have valid values
    }

  }

}
