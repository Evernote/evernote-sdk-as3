/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.userstore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.userstore.BootstrapProfile;

  /**
   *  This structure describes a collection of bootstrap profiles.
   * <dl>
   *  <dt>profiles:</dt>
   *    <dd>
   *    List of one or more bootstrap profiles, in descending
   *    preference order.
   *    </dd>
   *  </dl>
   */
  public class BootstrapInfo implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("BootstrapInfo");
    private static const PROFILES_FIELD_DESC:TField = new TField("profiles", TType.LIST, 1);

    private var _profiles:Array;
    public static const PROFILES:int = 1;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[PROFILES] = new FieldMetaData("profiles", TFieldRequirementType.REQUIRED, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, BootstrapProfile)));
    }
    {
      FieldMetaData.addStructMetaDataMap(BootstrapInfo, metaDataMap);
    }

    public function BootstrapInfo() {
    }

    public function get profiles():Array {
      return this._profiles;
    }

    public function set profiles(profiles:Array):void {
      this._profiles = profiles;
    }

    public function unsetProfiles():void {
      this.profiles = null;
    }

    // Returns true if field profiles is set (has been assigned a value) and false otherwise
    public function isSetProfiles():Boolean {
      return this.profiles != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case PROFILES:
        if (value == null) {
          unsetProfiles();
        } else {
          this.profiles = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case PROFILES:
        return this.profiles;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case PROFILES:
        return isSetProfiles();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PROFILES:
            if (field.type == TType.LIST) {
              {
                var _list38:TList = iprot.readListBegin();
                this.profiles = new Array();
                for (var _i39:int = 0; _i39 < _list38.size; ++_i39)
                {
                  var _elem40:BootstrapProfile;
                  _elem40 = new BootstrapProfile();
                  _elem40.read(iprot);
                  this.profiles.push(_elem40);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.profiles != null) {
        oprot.writeFieldBegin(PROFILES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.profiles.length));
          for each (var elem41:* in this.profiles)          {
            elem41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("BootstrapInfo(");
      var first:Boolean = true;

      ret += "profiles:";
      if (this.profiles == null) {
        ret += "null";
      } else {
        ret += this.profiles;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      if (profiles == null) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'profiles' was not present! Struct: " + toString());
      }
      // check that fields of type enum have valid values
    }

  }

}
