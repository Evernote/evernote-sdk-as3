/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.NoteAttributes;

  /**
   * This structure is used in the set of results returned by the
   * findNotesMetadata function.  It represents the high-level information about
   * a single Note, without some of the larger deep structure.  This allows
   * for the information about a list of Notes to be returned relatively quickly
   * with less marshalling and data transfer to remote clients.
   * Most fields in this structure are identical to the corresponding field in
   * the Note structure, with the exception of:
   * 
   * <dl>
   * <dt>largestResourceMime</dt>
   *   <dd>If set, then this will contain the MIME type of the largest Resource
   *   (in bytes) within the Note.  This may be useful, for example, to choose
   *   an appropriate icon or thumbnail to represent the Note.
   *   </dd>
   * 
   * <dt>largestResourceSize</dt>
   *  <dd>If set, this will contain the size of the largest Resource file, in
   *  bytes, within the Note.  This may be useful, for example, to decide whether
   *  to ask the server for a thumbnail to represent the Note.
   *  </dd>
   * </dl>
   */
  public class NoteMetadata implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("NoteMetadata");
    private static const GUID_FIELD_DESC:TField = new TField("guid", TType.STRING, 1);
    private static const TITLE_FIELD_DESC:TField = new TField("title", TType.STRING, 2);
    private static const CONTENT_LENGTH_FIELD_DESC:TField = new TField("contentLength", TType.I32, 5);
    private static const CREATED_FIELD_DESC:TField = new TField("created", TType.I64, 6);
    private static const UPDATED_FIELD_DESC:TField = new TField("updated", TType.I64, 7);
    private static const UPDATE_SEQUENCE_NUM_FIELD_DESC:TField = new TField("updateSequenceNum", TType.I32, 10);
    private static const NOTEBOOK_GUID_FIELD_DESC:TField = new TField("notebookGuid", TType.STRING, 11);
    private static const TAG_GUIDS_FIELD_DESC:TField = new TField("tagGuids", TType.LIST, 12);
    private static const ATTRIBUTES_FIELD_DESC:TField = new TField("attributes", TType.STRUCT, 14);
    private static const LARGEST_RESOURCE_MIME_FIELD_DESC:TField = new TField("largestResourceMime", TType.STRING, 20);
    private static const LARGEST_RESOURCE_SIZE_FIELD_DESC:TField = new TField("largestResourceSize", TType.I32, 21);

    private var _guid:String;
    public static const GUID:int = 1;
    private var _title:String;
    public static const TITLE:int = 2;
    private var _contentLength:int;
    public static const CONTENTLENGTH:int = 5;
    private var _created:BigInteger;
    public static const CREATED:int = 6;
    private var _updated:BigInteger;
    public static const UPDATED:int = 7;
    private var _updateSequenceNum:int;
    public static const UPDATESEQUENCENUM:int = 10;
    private var _notebookGuid:String;
    public static const NOTEBOOKGUID:int = 11;
    private var _tagGuids:Array;
    public static const TAGGUIDS:int = 12;
    private var _attributes:NoteAttributes;
    public static const ATTRIBUTES:int = 14;
    private var _largestResourceMime:String;
    public static const LARGESTRESOURCEMIME:int = 20;
    private var _largestResourceSize:int;
    public static const LARGESTRESOURCESIZE:int = 21;

    private var __isset_contentLength:Boolean = false;
    private var __isset_created:Boolean = false;
    private var __isset_updated:Boolean = false;
    private var __isset_updateSequenceNum:Boolean = false;
    private var __isset_largestResourceSize:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[GUID] = new FieldMetaData("guid", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[TITLE] = new FieldMetaData("title", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[CONTENTLENGTH] = new FieldMetaData("contentLength", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[CREATED] = new FieldMetaData("created", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[UPDATED] = new FieldMetaData("updated", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[UPDATESEQUENCENUM] = new FieldMetaData("updateSequenceNum", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[NOTEBOOKGUID] = new FieldMetaData("notebookGuid", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[TAGGUIDS] = new FieldMetaData("tagGuids", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING)));
      metaDataMap[ATTRIBUTES] = new FieldMetaData("attributes", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, NoteAttributes));
      metaDataMap[LARGESTRESOURCEMIME] = new FieldMetaData("largestResourceMime", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[LARGESTRESOURCESIZE] = new FieldMetaData("largestResourceSize", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(NoteMetadata, metaDataMap);
    }

    public function NoteMetadata() {
    }

    public function get guid():String {
      return this._guid;
    }

    public function set guid(guid:String):void {
      this._guid = guid;
    }

    public function unsetGuid():void {
      this.guid = null;
    }

    // Returns true if field guid is set (has been assigned a value) and false otherwise
    public function isSetGuid():Boolean {
      return this.guid != null;
    }

    public function get title():String {
      return this._title;
    }

    public function set title(title:String):void {
      this._title = title;
    }

    public function unsetTitle():void {
      this.title = null;
    }

    // Returns true if field title is set (has been assigned a value) and false otherwise
    public function isSetTitle():Boolean {
      return this.title != null;
    }

    public function get contentLength():int {
      return this._contentLength;
    }

    public function set contentLength(contentLength:int):void {
      this._contentLength = contentLength;
      this.__isset_contentLength = true;
    }

    public function unsetContentLength():void {
      this.__isset_contentLength = false;
    }

    // Returns true if field contentLength is set (has been assigned a value) and false otherwise
    public function isSetContentLength():Boolean {
      return this.__isset_contentLength;
    }

    public function get created():BigInteger {
      return this._created;
    }

    public function set created(created:BigInteger):void {
      this._created = created;
      this.__isset_created = true;
    }

    public function unsetCreated():void {
      this.__isset_created = false;
    }

    // Returns true if field created is set (has been assigned a value) and false otherwise
    public function isSetCreated():Boolean {
      return this.__isset_created;
    }

    public function get updated():BigInteger {
      return this._updated;
    }

    public function set updated(updated:BigInteger):void {
      this._updated = updated;
      this.__isset_updated = true;
    }

    public function unsetUpdated():void {
      this.__isset_updated = false;
    }

    // Returns true if field updated is set (has been assigned a value) and false otherwise
    public function isSetUpdated():Boolean {
      return this.__isset_updated;
    }

    public function get updateSequenceNum():int {
      return this._updateSequenceNum;
    }

    public function set updateSequenceNum(updateSequenceNum:int):void {
      this._updateSequenceNum = updateSequenceNum;
      this.__isset_updateSequenceNum = true;
    }

    public function unsetUpdateSequenceNum():void {
      this.__isset_updateSequenceNum = false;
    }

    // Returns true if field updateSequenceNum is set (has been assigned a value) and false otherwise
    public function isSetUpdateSequenceNum():Boolean {
      return this.__isset_updateSequenceNum;
    }

    public function get notebookGuid():String {
      return this._notebookGuid;
    }

    public function set notebookGuid(notebookGuid:String):void {
      this._notebookGuid = notebookGuid;
    }

    public function unsetNotebookGuid():void {
      this.notebookGuid = null;
    }

    // Returns true if field notebookGuid is set (has been assigned a value) and false otherwise
    public function isSetNotebookGuid():Boolean {
      return this.notebookGuid != null;
    }

    public function get tagGuids():Array {
      return this._tagGuids;
    }

    public function set tagGuids(tagGuids:Array):void {
      this._tagGuids = tagGuids;
    }

    public function unsetTagGuids():void {
      this.tagGuids = null;
    }

    // Returns true if field tagGuids is set (has been assigned a value) and false otherwise
    public function isSetTagGuids():Boolean {
      return this.tagGuids != null;
    }

    public function get attributes():NoteAttributes {
      return this._attributes;
    }

    public function set attributes(attributes:NoteAttributes):void {
      this._attributes = attributes;
    }

    public function unsetAttributes():void {
      this.attributes = null;
    }

    // Returns true if field attributes is set (has been assigned a value) and false otherwise
    public function isSetAttributes():Boolean {
      return this.attributes != null;
    }

    public function get largestResourceMime():String {
      return this._largestResourceMime;
    }

    public function set largestResourceMime(largestResourceMime:String):void {
      this._largestResourceMime = largestResourceMime;
    }

    public function unsetLargestResourceMime():void {
      this.largestResourceMime = null;
    }

    // Returns true if field largestResourceMime is set (has been assigned a value) and false otherwise
    public function isSetLargestResourceMime():Boolean {
      return this.largestResourceMime != null;
    }

    public function get largestResourceSize():int {
      return this._largestResourceSize;
    }

    public function set largestResourceSize(largestResourceSize:int):void {
      this._largestResourceSize = largestResourceSize;
      this.__isset_largestResourceSize = true;
    }

    public function unsetLargestResourceSize():void {
      this.__isset_largestResourceSize = false;
    }

    // Returns true if field largestResourceSize is set (has been assigned a value) and false otherwise
    public function isSetLargestResourceSize():Boolean {
      return this.__isset_largestResourceSize;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          this.guid = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case CONTENTLENGTH:
        if (value == null) {
          unsetContentLength();
        } else {
          this.contentLength = value;
        }
        break;

      case CREATED:
        if (value == null) {
          unsetCreated();
        } else {
          this.created = value;
        }
        break;

      case UPDATED:
        if (value == null) {
          unsetUpdated();
        } else {
          this.updated = value;
        }
        break;

      case UPDATESEQUENCENUM:
        if (value == null) {
          unsetUpdateSequenceNum();
        } else {
          this.updateSequenceNum = value;
        }
        break;

      case NOTEBOOKGUID:
        if (value == null) {
          unsetNotebookGuid();
        } else {
          this.notebookGuid = value;
        }
        break;

      case TAGGUIDS:
        if (value == null) {
          unsetTagGuids();
        } else {
          this.tagGuids = value;
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          this.attributes = value;
        }
        break;

      case LARGESTRESOURCEMIME:
        if (value == null) {
          unsetLargestResourceMime();
        } else {
          this.largestResourceMime = value;
        }
        break;

      case LARGESTRESOURCESIZE:
        if (value == null) {
          unsetLargestResourceSize();
        } else {
          this.largestResourceSize = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case GUID:
        return this.guid;
      case TITLE:
        return this.title;
      case CONTENTLENGTH:
        return this.contentLength;
      case CREATED:
        return this.created;
      case UPDATED:
        return this.updated;
      case UPDATESEQUENCENUM:
        return this.updateSequenceNum;
      case NOTEBOOKGUID:
        return this.notebookGuid;
      case TAGGUIDS:
        return this.tagGuids;
      case ATTRIBUTES:
        return this.attributes;
      case LARGESTRESOURCEMIME:
        return this.largestResourceMime;
      case LARGESTRESOURCESIZE:
        return this.largestResourceSize;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case GUID:
        return isSetGuid();
      case TITLE:
        return isSetTitle();
      case CONTENTLENGTH:
        return isSetContentLength();
      case CREATED:
        return isSetCreated();
      case UPDATED:
        return isSetUpdated();
      case UPDATESEQUENCENUM:
        return isSetUpdateSequenceNum();
      case NOTEBOOKGUID:
        return isSetNotebookGuid();
      case TAGGUIDS:
        return isSetTagGuids();
      case ATTRIBUTES:
        return isSetAttributes();
      case LARGESTRESOURCEMIME:
        return isSetLargestResourceMime();
      case LARGESTRESOURCESIZE:
        return isSetLargestResourceSize();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case GUID:
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TITLE:
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CONTENTLENGTH:
            if (field.type == TType.I32) {
              this.contentLength = iprot.readI32();
              this.__isset_contentLength = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CREATED:
            if (field.type == TType.I64) {
              this.created = iprot.readI64();
              this.__isset_created = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATED:
            if (field.type == TType.I64) {
              this.updated = iprot.readI64();
              this.__isset_updated = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATESEQUENCENUM:
            if (field.type == TType.I32) {
              this.updateSequenceNum = iprot.readI32();
              this.__isset_updateSequenceNum = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOTEBOOKGUID:
            if (field.type == TType.STRING) {
              this.notebookGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TAGGUIDS:
            if (field.type == TType.LIST) {
              {
                var _list115:TList = iprot.readListBegin();
                this.tagGuids = new Array();
                for (var _i116:int = 0; _i116 < _list115.size; ++_i116)
                {
                  var _elem117:String;
                  _elem117 = iprot.readString();
                  this.tagGuids.push(_elem117);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ATTRIBUTES:
            if (field.type == TType.STRUCT) {
              this.attributes = new NoteAttributes();
              this.attributes.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LARGESTRESOURCEMIME:
            if (field.type == TType.STRING) {
              this.largestResourceMime = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LARGESTRESOURCESIZE:
            if (field.type == TType.I32) {
              this.largestResourceSize = iprot.readI32();
              this.__isset_largestResourceSize = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.title != null) {
        if (isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(this.title);
          oprot.writeFieldEnd();
        }
      }
      if (isSetContentLength()) {
        oprot.writeFieldBegin(CONTENT_LENGTH_FIELD_DESC);
        oprot.writeI32(this.contentLength);
        oprot.writeFieldEnd();
      }
      if (isSetCreated()) {
        oprot.writeFieldBegin(CREATED_FIELD_DESC);
        oprot.writeI64(this.created);
        oprot.writeFieldEnd();
      }
      if (isSetUpdated()) {
        oprot.writeFieldBegin(UPDATED_FIELD_DESC);
        oprot.writeI64(this.updated);
        oprot.writeFieldEnd();
      }
      if (isSetUpdateSequenceNum()) {
        oprot.writeFieldBegin(UPDATE_SEQUENCE_NUM_FIELD_DESC);
        oprot.writeI32(this.updateSequenceNum);
        oprot.writeFieldEnd();
      }
      if (this.notebookGuid != null) {
        if (isSetNotebookGuid()) {
          oprot.writeFieldBegin(NOTEBOOK_GUID_FIELD_DESC);
          oprot.writeString(this.notebookGuid);
          oprot.writeFieldEnd();
        }
      }
      if (this.tagGuids != null) {
        if (isSetTagGuids()) {
          oprot.writeFieldBegin(TAG_GUIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRING, this.tagGuids.length));
            for each (var elem118:* in this.tagGuids)            {
              oprot.writeString(elem118);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.attributes != null) {
        if (isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          this.attributes.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (this.largestResourceMime != null) {
        if (isSetLargestResourceMime()) {
          oprot.writeFieldBegin(LARGEST_RESOURCE_MIME_FIELD_DESC);
          oprot.writeString(this.largestResourceMime);
          oprot.writeFieldEnd();
        }
      }
      if (isSetLargestResourceSize()) {
        oprot.writeFieldBegin(LARGEST_RESOURCE_SIZE_FIELD_DESC);
        oprot.writeI32(this.largestResourceSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("NoteMetadata(");
      var first:Boolean = true;

      ret += "guid:";
      if (this.guid == null) {
        ret += "null";
      } else {
        ret += this.guid;
      }
      first = false;
      if (isSetTitle()) {
        if (!first) ret +=  ", ";
        ret += "title:";
        if (this.title == null) {
          ret += "null";
        } else {
          ret += this.title;
        }
        first = false;
      }
      if (isSetContentLength()) {
        if (!first) ret +=  ", ";
        ret += "contentLength:";
        ret += this.contentLength;
        first = false;
      }
      if (isSetCreated()) {
        if (!first) ret +=  ", ";
        ret += "created:";
        ret += this.created;
        first = false;
      }
      if (isSetUpdated()) {
        if (!first) ret +=  ", ";
        ret += "updated:";
        ret += this.updated;
        first = false;
      }
      if (isSetUpdateSequenceNum()) {
        if (!first) ret +=  ", ";
        ret += "updateSequenceNum:";
        ret += this.updateSequenceNum;
        first = false;
      }
      if (isSetNotebookGuid()) {
        if (!first) ret +=  ", ";
        ret += "notebookGuid:";
        if (this.notebookGuid == null) {
          ret += "null";
        } else {
          ret += this.notebookGuid;
        }
        first = false;
      }
      if (isSetTagGuids()) {
        if (!first) ret +=  ", ";
        ret += "tagGuids:";
        if (this.tagGuids == null) {
          ret += "null";
        } else {
          ret += this.tagGuids;
        }
        first = false;
      }
      if (isSetAttributes()) {
        if (!first) ret +=  ", ";
        ret += "attributes:";
        if (this.attributes == null) {
          ret += "null";
        } else {
          ret += this.attributes;
        }
        first = false;
      }
      if (isSetLargestResourceMime()) {
        if (!first) ret +=  ", ";
        ret += "largestResourceMime:";
        if (this.largestResourceMime == null) {
          ret += "null";
        } else {
          ret += this.largestResourceMime;
        }
        first = false;
      }
      if (isSetLargestResourceSize()) {
        if (!first) ret +=  ", ";
        ret += "largestResourceSize:";
        ret += this.largestResourceSize;
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      if (guid == null) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'guid' was not present! Struct: " + toString());
      }
      // check that fields of type enum have valid values
    }

  }

}
