/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  /**
   * Information for tracking the display of a particular ad by a client.
   * 
   * <dl>
   *  <dt>adId</dt>
   *    <dd>
   *      The identifier for this ad, from a previous Ad.id given to the client
   *    </dd>
   * 
   *  <dt>impressionCount</dt>
   *    <dd>
   *      The number of times this ad was displayed since the last successful
   *      ad retrieval.  The client should only report times the ad was selected
   *      when the client was visible.
   *    </dd>
   * 
   *  <dt>impressionTime</dt>
   *    <dd>
   *      The number of seconds that the client displayed the advertisement since
   *      the last successful ad retrieval.  This corresponds to the seconds that
   *      the client application was visible.
   *    </dd>
   * </dl>
   */
  public class AdImpressions implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("AdImpressions");
    private static const AD_ID_FIELD_DESC:TField = new TField("adId", TType.I32, 1);
    private static const IMPRESSION_COUNT_FIELD_DESC:TField = new TField("impressionCount", TType.I32, 2);
    private static const IMPRESSION_TIME_FIELD_DESC:TField = new TField("impressionTime", TType.I32, 3);

    private var _adId:int;
    public static const ADID:int = 1;
    private var _impressionCount:int;
    public static const IMPRESSIONCOUNT:int = 2;
    private var _impressionTime:int;
    public static const IMPRESSIONTIME:int = 3;

    private var __isset_adId:Boolean = false;
    private var __isset_impressionCount:Boolean = false;
    private var __isset_impressionTime:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ADID] = new FieldMetaData("adId", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[IMPRESSIONCOUNT] = new FieldMetaData("impressionCount", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[IMPRESSIONTIME] = new FieldMetaData("impressionTime", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(AdImpressions, metaDataMap);
    }

    public function AdImpressions() {
    }

    public function get adId():int {
      return this._adId;
    }

    public function set adId(adId:int):void {
      this._adId = adId;
      this.__isset_adId = true;
    }

    public function unsetAdId():void {
      this.__isset_adId = false;
    }

    // Returns true if field adId is set (has been assigned a value) and false otherwise
    public function isSetAdId():Boolean {
      return this.__isset_adId;
    }

    public function get impressionCount():int {
      return this._impressionCount;
    }

    public function set impressionCount(impressionCount:int):void {
      this._impressionCount = impressionCount;
      this.__isset_impressionCount = true;
    }

    public function unsetImpressionCount():void {
      this.__isset_impressionCount = false;
    }

    // Returns true if field impressionCount is set (has been assigned a value) and false otherwise
    public function isSetImpressionCount():Boolean {
      return this.__isset_impressionCount;
    }

    public function get impressionTime():int {
      return this._impressionTime;
    }

    public function set impressionTime(impressionTime:int):void {
      this._impressionTime = impressionTime;
      this.__isset_impressionTime = true;
    }

    public function unsetImpressionTime():void {
      this.__isset_impressionTime = false;
    }

    // Returns true if field impressionTime is set (has been assigned a value) and false otherwise
    public function isSetImpressionTime():Boolean {
      return this.__isset_impressionTime;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ADID:
        if (value == null) {
          unsetAdId();
        } else {
          this.adId = value;
        }
        break;

      case IMPRESSIONCOUNT:
        if (value == null) {
          unsetImpressionCount();
        } else {
          this.impressionCount = value;
        }
        break;

      case IMPRESSIONTIME:
        if (value == null) {
          unsetImpressionTime();
        } else {
          this.impressionTime = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ADID:
        return this.adId;
      case IMPRESSIONCOUNT:
        return this.impressionCount;
      case IMPRESSIONTIME:
        return this.impressionTime;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ADID:
        return isSetAdId();
      case IMPRESSIONCOUNT:
        return isSetImpressionCount();
      case IMPRESSIONTIME:
        return isSetImpressionTime();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ADID:
            if (field.type == TType.I32) {
              this.adId = iprot.readI32();
              this.__isset_adId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case IMPRESSIONCOUNT:
            if (field.type == TType.I32) {
              this.impressionCount = iprot.readI32();
              this.__isset_impressionCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case IMPRESSIONTIME:
            if (field.type == TType.I32) {
              this.impressionTime = iprot.readI32();
              this.__isset_impressionTime = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      if (!__isset_adId) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'adId' was not found in serialized data! Struct: " + toString());
      }
      if (!__isset_impressionCount) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'impressionCount' was not found in serialized data! Struct: " + toString());
      }
      if (!__isset_impressionTime) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'impressionTime' was not found in serialized data! Struct: " + toString());
      }
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_ID_FIELD_DESC);
      oprot.writeI32(this.adId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IMPRESSION_COUNT_FIELD_DESC);
      oprot.writeI32(this.impressionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IMPRESSION_TIME_FIELD_DESC);
      oprot.writeI32(this.impressionTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("AdImpressions(");
      var first:Boolean = true;

      ret += "adId:";
      ret += this.adId;
      first = false;
      if (!first) ret +=  ", ";
      ret += "impressionCount:";
      ret += this.impressionCount;
      first = false;
      if (!first) ret +=  ", ";
      ret += "impressionTime:";
      ret += this.impressionTime;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // alas, we cannot check 'adId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'impressionCount' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'impressionTime' because it's a primitive and you chose the non-beans generator.
      // check that fields of type enum have valid values
    }

  }

}
