/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  /**
   *  This structure is used with the 'getFilteredSyncChunk' call to provide
   *  fine-grained control over the data that's returned when a client needs
   *  to synchronize with the service. Each flag in this structure specifies
   *  whether to include one class of data in the results of that call.
   * 
   * <dl>
   *  <dt>includeNotes</dt>
   *    <dd>
   *    If true, then the server will include the SyncChunks.notes field
   *    </dd>
   * 
   *  <dt>includeNoteResources</dt>
   *    <dd>
   *    If true, then the server will include the 'resources' field on all of
   *    the Notes that are in SyncChunk.notes.
   *    If 'includeNotes' is false, then this will have no effect.
   *    </dd>
   * 
   *  <dt>includeNoteAttributes</dt>
   *    <dd>
   *    If true, then the server will include the 'attributes' field on all of
   *    the Notes that are in SyncChunks.notes.
   *    If 'includeNotes' is false, then this will have no effect.
   *    </dd>
   * 
   *  <dt>includeNotebooks</dt>
   *    <dd>
   *    If true, then the server will include the SyncChunks.notebooks field
   *    </dd>
   * 
   *  <dt>includeTags</dt>
   *    <dd>
   *    If true, then the server will include the SyncChunks.tags field
   *    </dd>
   * 
   *  <dt>includeSearches</dt>
   *    <dd>
   *    If true, then the server will include the SyncChunks.searches field
   *    </dd>
   * 
   *  <dt>includeResources</dt>
   *    <dd>
   *    If true, then the server will include the SyncChunks.resources field.
   *    Since the Resources are also provided with their Note
   *    (in the Notes.resources list), this is primarily useful for clients that
   *    want to watch for changes to individual Resources due to recognition data
   *    being added.
   *    </dd>
   * 
   *  <dt>includeLinkedNotebooks</dt>
   *    <dd>
   *    If true, then the server will include the SyncChunks.linkedNotebooks field.
   *    </dd>
   * 
   *  <dt>includeExpunged</dt>
   *    <dd>
   *    If true, then the server will include the 'expunged' data for any type
   *    of included data.  For example, if 'includeTags' and 'includeExpunged'
   *    are both true, then the SyncChunks.expungedTags field will be set with
   *    the GUIDs of tags that have been expunged from the server.
   *    </dd>
   * 
   *  <dt>includeNoteApplicationDataFullMap</dt>
   *    <dd>
   *    If true, then the values for the applicationData map will be filled
   *    in, assuming notes and note attributes are being returned.  Otherwise,
   *    only the keysOnly field will be filled in.
   *    </dd>
   * 
   *  <dt>includeResourceApplicationDataFullMap</dt>
   *    <dd>
   *    If true, then the fullMap values for the applicationData map will be
   *    filled in, assuming resources and resource attributes are being returned
   *    (includeResources is true).  Otherwise, only the keysOnly field will be
   *    filled in.
   *    </dd>
   * 
   *  <dt>includeNoteResourceApplicationDataFullMap</dt>
   *    <dd>
   *    If true, then the fullMap values for the applicationData map will be
   *    filled in for resources found inside of notes, assuming resources are
   *    being returned in notes (includeNoteResources is true).  Otherwise,
   *    only the keysOnly field will be filled in.
   *    </dd>
   * 
   *  <dt>requireNoteContentClass</dt>
   *    <dd>
   *    If set, then only send notes whose content class matches this value.
   *    The value can be a literal match or, if the last character is an
   *    asterisk, a prefix match.
   *    </dd>
   * 
   *  </dl>
   */
  public class SyncChunkFilter implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("SyncChunkFilter");
    private static const INCLUDE_NOTES_FIELD_DESC:TField = new TField("includeNotes", TType.BOOL, 1);
    private static const INCLUDE_NOTE_RESOURCES_FIELD_DESC:TField = new TField("includeNoteResources", TType.BOOL, 2);
    private static const INCLUDE_NOTE_ATTRIBUTES_FIELD_DESC:TField = new TField("includeNoteAttributes", TType.BOOL, 3);
    private static const INCLUDE_NOTEBOOKS_FIELD_DESC:TField = new TField("includeNotebooks", TType.BOOL, 4);
    private static const INCLUDE_TAGS_FIELD_DESC:TField = new TField("includeTags", TType.BOOL, 5);
    private static const INCLUDE_SEARCHES_FIELD_DESC:TField = new TField("includeSearches", TType.BOOL, 6);
    private static const INCLUDE_RESOURCES_FIELD_DESC:TField = new TField("includeResources", TType.BOOL, 7);
    private static const INCLUDE_LINKED_NOTEBOOKS_FIELD_DESC:TField = new TField("includeLinkedNotebooks", TType.BOOL, 8);
    private static const INCLUDE_EXPUNGED_FIELD_DESC:TField = new TField("includeExpunged", TType.BOOL, 9);
    private static const INCLUDE_NOTE_APPLICATION_DATA_FULL_MAP_FIELD_DESC:TField = new TField("includeNoteApplicationDataFullMap", TType.BOOL, 10);
    private static const INCLUDE_RESOURCE_APPLICATION_DATA_FULL_MAP_FIELD_DESC:TField = new TField("includeResourceApplicationDataFullMap", TType.BOOL, 12);
    private static const INCLUDE_NOTE_RESOURCE_APPLICATION_DATA_FULL_MAP_FIELD_DESC:TField = new TField("includeNoteResourceApplicationDataFullMap", TType.BOOL, 13);
    private static const REQUIRE_NOTE_CONTENT_CLASS_FIELD_DESC:TField = new TField("requireNoteContentClass", TType.STRING, 11);

    private var _includeNotes:Boolean;
    public static const INCLUDENOTES:int = 1;
    private var _includeNoteResources:Boolean;
    public static const INCLUDENOTERESOURCES:int = 2;
    private var _includeNoteAttributes:Boolean;
    public static const INCLUDENOTEATTRIBUTES:int = 3;
    private var _includeNotebooks:Boolean;
    public static const INCLUDENOTEBOOKS:int = 4;
    private var _includeTags:Boolean;
    public static const INCLUDETAGS:int = 5;
    private var _includeSearches:Boolean;
    public static const INCLUDESEARCHES:int = 6;
    private var _includeResources:Boolean;
    public static const INCLUDERESOURCES:int = 7;
    private var _includeLinkedNotebooks:Boolean;
    public static const INCLUDELINKEDNOTEBOOKS:int = 8;
    private var _includeExpunged:Boolean;
    public static const INCLUDEEXPUNGED:int = 9;
    private var _includeNoteApplicationDataFullMap:Boolean;
    public static const INCLUDENOTEAPPLICATIONDATAFULLMAP:int = 10;
    private var _includeResourceApplicationDataFullMap:Boolean;
    public static const INCLUDERESOURCEAPPLICATIONDATAFULLMAP:int = 12;
    private var _includeNoteResourceApplicationDataFullMap:Boolean;
    public static const INCLUDENOTERESOURCEAPPLICATIONDATAFULLMAP:int = 13;
    private var _requireNoteContentClass:String;
    public static const REQUIRENOTECONTENTCLASS:int = 11;

    private var __isset_includeNotes:Boolean = false;
    private var __isset_includeNoteResources:Boolean = false;
    private var __isset_includeNoteAttributes:Boolean = false;
    private var __isset_includeNotebooks:Boolean = false;
    private var __isset_includeTags:Boolean = false;
    private var __isset_includeSearches:Boolean = false;
    private var __isset_includeResources:Boolean = false;
    private var __isset_includeLinkedNotebooks:Boolean = false;
    private var __isset_includeExpunged:Boolean = false;
    private var __isset_includeNoteApplicationDataFullMap:Boolean = false;
    private var __isset_includeResourceApplicationDataFullMap:Boolean = false;
    private var __isset_includeNoteResourceApplicationDataFullMap:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[INCLUDENOTES] = new FieldMetaData("includeNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDENOTERESOURCES] = new FieldMetaData("includeNoteResources", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDENOTEATTRIBUTES] = new FieldMetaData("includeNoteAttributes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDENOTEBOOKS] = new FieldMetaData("includeNotebooks", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDETAGS] = new FieldMetaData("includeTags", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDESEARCHES] = new FieldMetaData("includeSearches", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDERESOURCES] = new FieldMetaData("includeResources", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDELINKEDNOTEBOOKS] = new FieldMetaData("includeLinkedNotebooks", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDEEXPUNGED] = new FieldMetaData("includeExpunged", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDENOTEAPPLICATIONDATAFULLMAP] = new FieldMetaData("includeNoteApplicationDataFullMap", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDERESOURCEAPPLICATIONDATAFULLMAP] = new FieldMetaData("includeResourceApplicationDataFullMap", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[INCLUDENOTERESOURCEAPPLICATIONDATAFULLMAP] = new FieldMetaData("includeNoteResourceApplicationDataFullMap", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[REQUIRENOTECONTENTCLASS] = new FieldMetaData("requireNoteContentClass", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(SyncChunkFilter, metaDataMap);
    }

    public function SyncChunkFilter() {
    }

    public function get includeNotes():Boolean {
      return this._includeNotes;
    }

    public function set includeNotes(includeNotes:Boolean):void {
      this._includeNotes = includeNotes;
      this.__isset_includeNotes = true;
    }

    public function unsetIncludeNotes():void {
      this.__isset_includeNotes = false;
    }

    // Returns true if field includeNotes is set (has been assigned a value) and false otherwise
    public function isSetIncludeNotes():Boolean {
      return this.__isset_includeNotes;
    }

    public function get includeNoteResources():Boolean {
      return this._includeNoteResources;
    }

    public function set includeNoteResources(includeNoteResources:Boolean):void {
      this._includeNoteResources = includeNoteResources;
      this.__isset_includeNoteResources = true;
    }

    public function unsetIncludeNoteResources():void {
      this.__isset_includeNoteResources = false;
    }

    // Returns true if field includeNoteResources is set (has been assigned a value) and false otherwise
    public function isSetIncludeNoteResources():Boolean {
      return this.__isset_includeNoteResources;
    }

    public function get includeNoteAttributes():Boolean {
      return this._includeNoteAttributes;
    }

    public function set includeNoteAttributes(includeNoteAttributes:Boolean):void {
      this._includeNoteAttributes = includeNoteAttributes;
      this.__isset_includeNoteAttributes = true;
    }

    public function unsetIncludeNoteAttributes():void {
      this.__isset_includeNoteAttributes = false;
    }

    // Returns true if field includeNoteAttributes is set (has been assigned a value) and false otherwise
    public function isSetIncludeNoteAttributes():Boolean {
      return this.__isset_includeNoteAttributes;
    }

    public function get includeNotebooks():Boolean {
      return this._includeNotebooks;
    }

    public function set includeNotebooks(includeNotebooks:Boolean):void {
      this._includeNotebooks = includeNotebooks;
      this.__isset_includeNotebooks = true;
    }

    public function unsetIncludeNotebooks():void {
      this.__isset_includeNotebooks = false;
    }

    // Returns true if field includeNotebooks is set (has been assigned a value) and false otherwise
    public function isSetIncludeNotebooks():Boolean {
      return this.__isset_includeNotebooks;
    }

    public function get includeTags():Boolean {
      return this._includeTags;
    }

    public function set includeTags(includeTags:Boolean):void {
      this._includeTags = includeTags;
      this.__isset_includeTags = true;
    }

    public function unsetIncludeTags():void {
      this.__isset_includeTags = false;
    }

    // Returns true if field includeTags is set (has been assigned a value) and false otherwise
    public function isSetIncludeTags():Boolean {
      return this.__isset_includeTags;
    }

    public function get includeSearches():Boolean {
      return this._includeSearches;
    }

    public function set includeSearches(includeSearches:Boolean):void {
      this._includeSearches = includeSearches;
      this.__isset_includeSearches = true;
    }

    public function unsetIncludeSearches():void {
      this.__isset_includeSearches = false;
    }

    // Returns true if field includeSearches is set (has been assigned a value) and false otherwise
    public function isSetIncludeSearches():Boolean {
      return this.__isset_includeSearches;
    }

    public function get includeResources():Boolean {
      return this._includeResources;
    }

    public function set includeResources(includeResources:Boolean):void {
      this._includeResources = includeResources;
      this.__isset_includeResources = true;
    }

    public function unsetIncludeResources():void {
      this.__isset_includeResources = false;
    }

    // Returns true if field includeResources is set (has been assigned a value) and false otherwise
    public function isSetIncludeResources():Boolean {
      return this.__isset_includeResources;
    }

    public function get includeLinkedNotebooks():Boolean {
      return this._includeLinkedNotebooks;
    }

    public function set includeLinkedNotebooks(includeLinkedNotebooks:Boolean):void {
      this._includeLinkedNotebooks = includeLinkedNotebooks;
      this.__isset_includeLinkedNotebooks = true;
    }

    public function unsetIncludeLinkedNotebooks():void {
      this.__isset_includeLinkedNotebooks = false;
    }

    // Returns true if field includeLinkedNotebooks is set (has been assigned a value) and false otherwise
    public function isSetIncludeLinkedNotebooks():Boolean {
      return this.__isset_includeLinkedNotebooks;
    }

    public function get includeExpunged():Boolean {
      return this._includeExpunged;
    }

    public function set includeExpunged(includeExpunged:Boolean):void {
      this._includeExpunged = includeExpunged;
      this.__isset_includeExpunged = true;
    }

    public function unsetIncludeExpunged():void {
      this.__isset_includeExpunged = false;
    }

    // Returns true if field includeExpunged is set (has been assigned a value) and false otherwise
    public function isSetIncludeExpunged():Boolean {
      return this.__isset_includeExpunged;
    }

    public function get includeNoteApplicationDataFullMap():Boolean {
      return this._includeNoteApplicationDataFullMap;
    }

    public function set includeNoteApplicationDataFullMap(includeNoteApplicationDataFullMap:Boolean):void {
      this._includeNoteApplicationDataFullMap = includeNoteApplicationDataFullMap;
      this.__isset_includeNoteApplicationDataFullMap = true;
    }

    public function unsetIncludeNoteApplicationDataFullMap():void {
      this.__isset_includeNoteApplicationDataFullMap = false;
    }

    // Returns true if field includeNoteApplicationDataFullMap is set (has been assigned a value) and false otherwise
    public function isSetIncludeNoteApplicationDataFullMap():Boolean {
      return this.__isset_includeNoteApplicationDataFullMap;
    }

    public function get includeResourceApplicationDataFullMap():Boolean {
      return this._includeResourceApplicationDataFullMap;
    }

    public function set includeResourceApplicationDataFullMap(includeResourceApplicationDataFullMap:Boolean):void {
      this._includeResourceApplicationDataFullMap = includeResourceApplicationDataFullMap;
      this.__isset_includeResourceApplicationDataFullMap = true;
    }

    public function unsetIncludeResourceApplicationDataFullMap():void {
      this.__isset_includeResourceApplicationDataFullMap = false;
    }

    // Returns true if field includeResourceApplicationDataFullMap is set (has been assigned a value) and false otherwise
    public function isSetIncludeResourceApplicationDataFullMap():Boolean {
      return this.__isset_includeResourceApplicationDataFullMap;
    }

    public function get includeNoteResourceApplicationDataFullMap():Boolean {
      return this._includeNoteResourceApplicationDataFullMap;
    }

    public function set includeNoteResourceApplicationDataFullMap(includeNoteResourceApplicationDataFullMap:Boolean):void {
      this._includeNoteResourceApplicationDataFullMap = includeNoteResourceApplicationDataFullMap;
      this.__isset_includeNoteResourceApplicationDataFullMap = true;
    }

    public function unsetIncludeNoteResourceApplicationDataFullMap():void {
      this.__isset_includeNoteResourceApplicationDataFullMap = false;
    }

    // Returns true if field includeNoteResourceApplicationDataFullMap is set (has been assigned a value) and false otherwise
    public function isSetIncludeNoteResourceApplicationDataFullMap():Boolean {
      return this.__isset_includeNoteResourceApplicationDataFullMap;
    }

    public function get requireNoteContentClass():String {
      return this._requireNoteContentClass;
    }

    public function set requireNoteContentClass(requireNoteContentClass:String):void {
      this._requireNoteContentClass = requireNoteContentClass;
    }

    public function unsetRequireNoteContentClass():void {
      this.requireNoteContentClass = null;
    }

    // Returns true if field requireNoteContentClass is set (has been assigned a value) and false otherwise
    public function isSetRequireNoteContentClass():Boolean {
      return this.requireNoteContentClass != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case INCLUDENOTES:
        if (value == null) {
          unsetIncludeNotes();
        } else {
          this.includeNotes = value;
        }
        break;

      case INCLUDENOTERESOURCES:
        if (value == null) {
          unsetIncludeNoteResources();
        } else {
          this.includeNoteResources = value;
        }
        break;

      case INCLUDENOTEATTRIBUTES:
        if (value == null) {
          unsetIncludeNoteAttributes();
        } else {
          this.includeNoteAttributes = value;
        }
        break;

      case INCLUDENOTEBOOKS:
        if (value == null) {
          unsetIncludeNotebooks();
        } else {
          this.includeNotebooks = value;
        }
        break;

      case INCLUDETAGS:
        if (value == null) {
          unsetIncludeTags();
        } else {
          this.includeTags = value;
        }
        break;

      case INCLUDESEARCHES:
        if (value == null) {
          unsetIncludeSearches();
        } else {
          this.includeSearches = value;
        }
        break;

      case INCLUDERESOURCES:
        if (value == null) {
          unsetIncludeResources();
        } else {
          this.includeResources = value;
        }
        break;

      case INCLUDELINKEDNOTEBOOKS:
        if (value == null) {
          unsetIncludeLinkedNotebooks();
        } else {
          this.includeLinkedNotebooks = value;
        }
        break;

      case INCLUDEEXPUNGED:
        if (value == null) {
          unsetIncludeExpunged();
        } else {
          this.includeExpunged = value;
        }
        break;

      case INCLUDENOTEAPPLICATIONDATAFULLMAP:
        if (value == null) {
          unsetIncludeNoteApplicationDataFullMap();
        } else {
          this.includeNoteApplicationDataFullMap = value;
        }
        break;

      case INCLUDERESOURCEAPPLICATIONDATAFULLMAP:
        if (value == null) {
          unsetIncludeResourceApplicationDataFullMap();
        } else {
          this.includeResourceApplicationDataFullMap = value;
        }
        break;

      case INCLUDENOTERESOURCEAPPLICATIONDATAFULLMAP:
        if (value == null) {
          unsetIncludeNoteResourceApplicationDataFullMap();
        } else {
          this.includeNoteResourceApplicationDataFullMap = value;
        }
        break;

      case REQUIRENOTECONTENTCLASS:
        if (value == null) {
          unsetRequireNoteContentClass();
        } else {
          this.requireNoteContentClass = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case INCLUDENOTES:
        return this.includeNotes;
      case INCLUDENOTERESOURCES:
        return this.includeNoteResources;
      case INCLUDENOTEATTRIBUTES:
        return this.includeNoteAttributes;
      case INCLUDENOTEBOOKS:
        return this.includeNotebooks;
      case INCLUDETAGS:
        return this.includeTags;
      case INCLUDESEARCHES:
        return this.includeSearches;
      case INCLUDERESOURCES:
        return this.includeResources;
      case INCLUDELINKEDNOTEBOOKS:
        return this.includeLinkedNotebooks;
      case INCLUDEEXPUNGED:
        return this.includeExpunged;
      case INCLUDENOTEAPPLICATIONDATAFULLMAP:
        return this.includeNoteApplicationDataFullMap;
      case INCLUDERESOURCEAPPLICATIONDATAFULLMAP:
        return this.includeResourceApplicationDataFullMap;
      case INCLUDENOTERESOURCEAPPLICATIONDATAFULLMAP:
        return this.includeNoteResourceApplicationDataFullMap;
      case REQUIRENOTECONTENTCLASS:
        return this.requireNoteContentClass;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case INCLUDENOTES:
        return isSetIncludeNotes();
      case INCLUDENOTERESOURCES:
        return isSetIncludeNoteResources();
      case INCLUDENOTEATTRIBUTES:
        return isSetIncludeNoteAttributes();
      case INCLUDENOTEBOOKS:
        return isSetIncludeNotebooks();
      case INCLUDETAGS:
        return isSetIncludeTags();
      case INCLUDESEARCHES:
        return isSetIncludeSearches();
      case INCLUDERESOURCES:
        return isSetIncludeResources();
      case INCLUDELINKEDNOTEBOOKS:
        return isSetIncludeLinkedNotebooks();
      case INCLUDEEXPUNGED:
        return isSetIncludeExpunged();
      case INCLUDENOTEAPPLICATIONDATAFULLMAP:
        return isSetIncludeNoteApplicationDataFullMap();
      case INCLUDERESOURCEAPPLICATIONDATAFULLMAP:
        return isSetIncludeResourceApplicationDataFullMap();
      case INCLUDENOTERESOURCEAPPLICATIONDATAFULLMAP:
        return isSetIncludeNoteResourceApplicationDataFullMap();
      case REQUIRENOTECONTENTCLASS:
        return isSetRequireNoteContentClass();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case INCLUDENOTES:
            if (field.type == TType.BOOL) {
              this.includeNotes = iprot.readBool();
              this.__isset_includeNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDENOTERESOURCES:
            if (field.type == TType.BOOL) {
              this.includeNoteResources = iprot.readBool();
              this.__isset_includeNoteResources = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDENOTEATTRIBUTES:
            if (field.type == TType.BOOL) {
              this.includeNoteAttributes = iprot.readBool();
              this.__isset_includeNoteAttributes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDENOTEBOOKS:
            if (field.type == TType.BOOL) {
              this.includeNotebooks = iprot.readBool();
              this.__isset_includeNotebooks = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDETAGS:
            if (field.type == TType.BOOL) {
              this.includeTags = iprot.readBool();
              this.__isset_includeTags = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDESEARCHES:
            if (field.type == TType.BOOL) {
              this.includeSearches = iprot.readBool();
              this.__isset_includeSearches = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDERESOURCES:
            if (field.type == TType.BOOL) {
              this.includeResources = iprot.readBool();
              this.__isset_includeResources = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDELINKEDNOTEBOOKS:
            if (field.type == TType.BOOL) {
              this.includeLinkedNotebooks = iprot.readBool();
              this.__isset_includeLinkedNotebooks = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDEEXPUNGED:
            if (field.type == TType.BOOL) {
              this.includeExpunged = iprot.readBool();
              this.__isset_includeExpunged = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDENOTEAPPLICATIONDATAFULLMAP:
            if (field.type == TType.BOOL) {
              this.includeNoteApplicationDataFullMap = iprot.readBool();
              this.__isset_includeNoteApplicationDataFullMap = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDERESOURCEAPPLICATIONDATAFULLMAP:
            if (field.type == TType.BOOL) {
              this.includeResourceApplicationDataFullMap = iprot.readBool();
              this.__isset_includeResourceApplicationDataFullMap = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCLUDENOTERESOURCEAPPLICATIONDATAFULLMAP:
            if (field.type == TType.BOOL) {
              this.includeNoteResourceApplicationDataFullMap = iprot.readBool();
              this.__isset_includeNoteResourceApplicationDataFullMap = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case REQUIRENOTECONTENTCLASS:
            if (field.type == TType.STRING) {
              this.requireNoteContentClass = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (isSetIncludeNotes()) {
        oprot.writeFieldBegin(INCLUDE_NOTES_FIELD_DESC);
        oprot.writeBool(this.includeNotes);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeNoteResources()) {
        oprot.writeFieldBegin(INCLUDE_NOTE_RESOURCES_FIELD_DESC);
        oprot.writeBool(this.includeNoteResources);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeNoteAttributes()) {
        oprot.writeFieldBegin(INCLUDE_NOTE_ATTRIBUTES_FIELD_DESC);
        oprot.writeBool(this.includeNoteAttributes);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeNotebooks()) {
        oprot.writeFieldBegin(INCLUDE_NOTEBOOKS_FIELD_DESC);
        oprot.writeBool(this.includeNotebooks);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeTags()) {
        oprot.writeFieldBegin(INCLUDE_TAGS_FIELD_DESC);
        oprot.writeBool(this.includeTags);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeSearches()) {
        oprot.writeFieldBegin(INCLUDE_SEARCHES_FIELD_DESC);
        oprot.writeBool(this.includeSearches);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeResources()) {
        oprot.writeFieldBegin(INCLUDE_RESOURCES_FIELD_DESC);
        oprot.writeBool(this.includeResources);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeLinkedNotebooks()) {
        oprot.writeFieldBegin(INCLUDE_LINKED_NOTEBOOKS_FIELD_DESC);
        oprot.writeBool(this.includeLinkedNotebooks);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeExpunged()) {
        oprot.writeFieldBegin(INCLUDE_EXPUNGED_FIELD_DESC);
        oprot.writeBool(this.includeExpunged);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeNoteApplicationDataFullMap()) {
        oprot.writeFieldBegin(INCLUDE_NOTE_APPLICATION_DATA_FULL_MAP_FIELD_DESC);
        oprot.writeBool(this.includeNoteApplicationDataFullMap);
        oprot.writeFieldEnd();
      }
      if (this.requireNoteContentClass != null) {
        if (isSetRequireNoteContentClass()) {
          oprot.writeFieldBegin(REQUIRE_NOTE_CONTENT_CLASS_FIELD_DESC);
          oprot.writeString(this.requireNoteContentClass);
          oprot.writeFieldEnd();
        }
      }
      if (isSetIncludeResourceApplicationDataFullMap()) {
        oprot.writeFieldBegin(INCLUDE_RESOURCE_APPLICATION_DATA_FULL_MAP_FIELD_DESC);
        oprot.writeBool(this.includeResourceApplicationDataFullMap);
        oprot.writeFieldEnd();
      }
      if (isSetIncludeNoteResourceApplicationDataFullMap()) {
        oprot.writeFieldBegin(INCLUDE_NOTE_RESOURCE_APPLICATION_DATA_FULL_MAP_FIELD_DESC);
        oprot.writeBool(this.includeNoteResourceApplicationDataFullMap);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("SyncChunkFilter(");
      var first:Boolean = true;

      if (isSetIncludeNotes()) {
        ret += "includeNotes:";
        ret += this.includeNotes;
        first = false;
      }
      if (isSetIncludeNoteResources()) {
        if (!first) ret +=  ", ";
        ret += "includeNoteResources:";
        ret += this.includeNoteResources;
        first = false;
      }
      if (isSetIncludeNoteAttributes()) {
        if (!first) ret +=  ", ";
        ret += "includeNoteAttributes:";
        ret += this.includeNoteAttributes;
        first = false;
      }
      if (isSetIncludeNotebooks()) {
        if (!first) ret +=  ", ";
        ret += "includeNotebooks:";
        ret += this.includeNotebooks;
        first = false;
      }
      if (isSetIncludeTags()) {
        if (!first) ret +=  ", ";
        ret += "includeTags:";
        ret += this.includeTags;
        first = false;
      }
      if (isSetIncludeSearches()) {
        if (!first) ret +=  ", ";
        ret += "includeSearches:";
        ret += this.includeSearches;
        first = false;
      }
      if (isSetIncludeResources()) {
        if (!first) ret +=  ", ";
        ret += "includeResources:";
        ret += this.includeResources;
        first = false;
      }
      if (isSetIncludeLinkedNotebooks()) {
        if (!first) ret +=  ", ";
        ret += "includeLinkedNotebooks:";
        ret += this.includeLinkedNotebooks;
        first = false;
      }
      if (isSetIncludeExpunged()) {
        if (!first) ret +=  ", ";
        ret += "includeExpunged:";
        ret += this.includeExpunged;
        first = false;
      }
      if (isSetIncludeNoteApplicationDataFullMap()) {
        if (!first) ret +=  ", ";
        ret += "includeNoteApplicationDataFullMap:";
        ret += this.includeNoteApplicationDataFullMap;
        first = false;
      }
      if (isSetIncludeResourceApplicationDataFullMap()) {
        if (!first) ret +=  ", ";
        ret += "includeResourceApplicationDataFullMap:";
        ret += this.includeResourceApplicationDataFullMap;
        first = false;
      }
      if (isSetIncludeNoteResourceApplicationDataFullMap()) {
        if (!first) ret +=  ", ";
        ret += "includeNoteResourceApplicationDataFullMap:";
        ret += this.includeNoteResourceApplicationDataFullMap;
        first = false;
      }
      if (isSetRequireNoteContentClass()) {
        if (!first) ret +=  ", ";
        ret += "requireNoteContentClass:";
        if (this.requireNoteContentClass == null) {
          ret += "null";
        } else {
          ret += this.requireNoteContentClass;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
