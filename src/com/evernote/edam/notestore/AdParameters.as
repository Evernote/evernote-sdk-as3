/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.notestore.AdImpressions;

  /**
   * Parameters that will be given by a client to the service when it requests
   * a set of advertisements to display.  If any of these values are omitted,
   * the service will use default values.
   * 
   * <dl>
   *  <dt>clientLanguage</dt>
   *    <dd>
   *      The ISO 639-1 language code for the primary language for the client.
   *      If omitted, English will be assumed ('en').
   *    </dd>
   * 
   *  <dt>impressions</dt>
   *    <dd>
   *      A list of the impression counts and total display time for the ads
   *      that were displayed in the last day.
   *    </dd>
   * 
   *  <dt>supportHtml</dt>
   *    <dd>
   *      If true, the client requesting the ads supports ads specified via
   *      general HTML (with rich media, Javascript, etc.).
   *    </dd>
   * 
   *  <dt>clientProperties</dt>
   *    <dd>
   *      If provided, this may contain a set of key/value pairs that identify
   *      the characteristics of a particular client that may be used to help
   *      determine appropriate ads for that client.  These tuples may be used
   *      either to reduce or increase the likelihood that each ad will be
   *      returned.
   *    </dd>
   * </dl>
   */
  public class AdParameters implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("AdParameters");
    private static const CLIENT_LANGUAGE_FIELD_DESC:TField = new TField("clientLanguage", TType.STRING, 2);
    private static const IMPRESSIONS_FIELD_DESC:TField = new TField("impressions", TType.LIST, 4);
    private static const SUPPORT_HTML_FIELD_DESC:TField = new TField("supportHtml", TType.BOOL, 5);
    private static const CLIENT_PROPERTIES_FIELD_DESC:TField = new TField("clientProperties", TType.MAP, 6);

    private var _clientLanguage:String;
    public static const CLIENTLANGUAGE:int = 2;
    private var _impressions:Array;
    public static const IMPRESSIONS:int = 4;
    private var _supportHtml:Boolean;
    public static const SUPPORTHTML:int = 5;
    private var _clientProperties:Dictionary;
    public static const CLIENTPROPERTIES:int = 6;

    private var __isset_supportHtml:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[CLIENTLANGUAGE] = new FieldMetaData("clientLanguage", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[IMPRESSIONS] = new FieldMetaData("impressions", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, AdImpressions)));
      metaDataMap[SUPPORTHTML] = new FieldMetaData("supportHtml", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[CLIENTPROPERTIES] = new FieldMetaData("clientProperties", TFieldRequirementType.OPTIONAL, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING)));
    }
    {
      FieldMetaData.addStructMetaDataMap(AdParameters, metaDataMap);
    }

    public function AdParameters() {
    }

    public function get clientLanguage():String {
      return this._clientLanguage;
    }

    public function set clientLanguage(clientLanguage:String):void {
      this._clientLanguage = clientLanguage;
    }

    public function unsetClientLanguage():void {
      this.clientLanguage = null;
    }

    // Returns true if field clientLanguage is set (has been assigned a value) and false otherwise
    public function isSetClientLanguage():Boolean {
      return this.clientLanguage != null;
    }

    public function get impressions():Array {
      return this._impressions;
    }

    public function set impressions(impressions:Array):void {
      this._impressions = impressions;
    }

    public function unsetImpressions():void {
      this.impressions = null;
    }

    // Returns true if field impressions is set (has been assigned a value) and false otherwise
    public function isSetImpressions():Boolean {
      return this.impressions != null;
    }

    public function get supportHtml():Boolean {
      return this._supportHtml;
    }

    public function set supportHtml(supportHtml:Boolean):void {
      this._supportHtml = supportHtml;
      this.__isset_supportHtml = true;
    }

    public function unsetSupportHtml():void {
      this.__isset_supportHtml = false;
    }

    // Returns true if field supportHtml is set (has been assigned a value) and false otherwise
    public function isSetSupportHtml():Boolean {
      return this.__isset_supportHtml;
    }

    public function get clientProperties():Dictionary {
      return this._clientProperties;
    }

    public function set clientProperties(clientProperties:Dictionary):void {
      this._clientProperties = clientProperties;
    }

    public function unsetClientProperties():void {
      this.clientProperties = null;
    }

    // Returns true if field clientProperties is set (has been assigned a value) and false otherwise
    public function isSetClientProperties():Boolean {
      return this.clientProperties != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case CLIENTLANGUAGE:
        if (value == null) {
          unsetClientLanguage();
        } else {
          this.clientLanguage = value;
        }
        break;

      case IMPRESSIONS:
        if (value == null) {
          unsetImpressions();
        } else {
          this.impressions = value;
        }
        break;

      case SUPPORTHTML:
        if (value == null) {
          unsetSupportHtml();
        } else {
          this.supportHtml = value;
        }
        break;

      case CLIENTPROPERTIES:
        if (value == null) {
          unsetClientProperties();
        } else {
          this.clientProperties = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case CLIENTLANGUAGE:
        return this.clientLanguage;
      case IMPRESSIONS:
        return this.impressions;
      case SUPPORTHTML:
        return this.supportHtml;
      case CLIENTPROPERTIES:
        return this.clientProperties;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case CLIENTLANGUAGE:
        return isSetClientLanguage();
      case IMPRESSIONS:
        return isSetImpressions();
      case SUPPORTHTML:
        return isSetSupportHtml();
      case CLIENTPROPERTIES:
        return isSetClientProperties();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CLIENTLANGUAGE:
            if (field.type == TType.STRING) {
              this.clientLanguage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case IMPRESSIONS:
            if (field.type == TType.LIST) {
              {
                var _list171:TList = iprot.readListBegin();
                this.impressions = new Array();
                for (var _i172:int = 0; _i172 < _list171.size; ++_i172)
                {
                  var _elem173:AdImpressions;
                  _elem173 = new AdImpressions();
                  _elem173.read(iprot);
                  this.impressions.push(_elem173);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SUPPORTHTML:
            if (field.type == TType.BOOL) {
              this.supportHtml = iprot.readBool();
              this.__isset_supportHtml = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CLIENTPROPERTIES:
            if (field.type == TType.MAP) {
              {
                var _map174:TMap = iprot.readMapBegin();
                this.clientProperties = new Dictionary();
                for (var _i175:int = 0; _i175 < _map174.size; ++_i175)
                {
                  var _key176:String;
                  var _val177:String;
                  _key176 = iprot.readString();
                  _val177 = iprot.readString();
                  this.clientProperties[_key176] = _val177;
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.clientLanguage != null) {
        if (isSetClientLanguage()) {
          oprot.writeFieldBegin(CLIENT_LANGUAGE_FIELD_DESC);
          oprot.writeString(this.clientLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (this.impressions != null) {
        if (isSetImpressions()) {
          oprot.writeFieldBegin(IMPRESSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.impressions.length));
            for each (var elem178:* in this.impressions)            {
              elem178.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (isSetSupportHtml()) {
        oprot.writeFieldBegin(SUPPORT_HTML_FIELD_DESC);
        oprot.writeBool(this.supportHtml);
        oprot.writeFieldEnd();
      }
      if (this.clientProperties != null) {
        if (isSetClientProperties()) {
          oprot.writeFieldBegin(CLIENT_PROPERTIES_FIELD_DESC);
          {
            var _sizeCounter180:int = 0;
            for (var _key179:* in this.clientProperties) {
              _sizeCounter180++;
            }
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter180));
            for (var elem181:* in this.clientProperties)            {
              oprot.writeString(elem181);
              oprot.writeString(this.clientProperties[elem181]);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("AdParameters(");
      var first:Boolean = true;

      if (isSetClientLanguage()) {
        ret += "clientLanguage:";
        if (this.clientLanguage == null) {
          ret += "null";
        } else {
          ret += this.clientLanguage;
        }
        first = false;
      }
      if (isSetImpressions()) {
        if (!first) ret +=  ", ";
        ret += "impressions:";
        if (this.impressions == null) {
          ret += "null";
        } else {
          ret += this.impressions;
        }
        first = false;
      }
      if (isSetSupportHtml()) {
        if (!first) ret +=  ", ";
        ret += "supportHtml:";
        ret += this.supportHtml;
        first = false;
      }
      if (isSetClientProperties()) {
        if (!first) ret +=  ", ";
        ret += "clientProperties:";
        if (this.clientProperties == null) {
          ret += "null";
        } else {
          ret += this.clientProperties;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
