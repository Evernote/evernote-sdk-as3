/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.PrivilegeLevel;
import com.evernote.edam.type.UserAttributes;
import com.evernote.edam.type.Accounting;

  /**
   *  This represents the information about a single user account.
   * <dl>
   *  <dt>id</dt>
   *    <dd>The unique numeric identifier for the account, which will not
   *    change for the lifetime of the account.
   *    </dd>
   * 
   *  <dt>username</dt>
   *    <dd>The name that the user provides to log in to their
   *    account. In the future, this may be empty for some accounts if their login
   *    process is indirect (e.g. via social networks, etc.).
   *    May only contain a-z, 0-9, or '-', and may not start or end with the '-'
   *    <br/>
   *    Length:  EDAM_USER_USERNAME_LEN_MIN - EDAM_USER_USERNAME_LEN_MAX
   *    <br/>
   *    Regex:  EDAM_USER_USERNAME_REGEX
   *    </dd>
   * 
   *  <dt>email</dt>
   *    <dd>The email address registered for the user.  Must comply with
   *    RFC 2821 and RFC 2822.<br/>
   *    Length:  EDAM_EMAIL_LEN_MIN - EDAM_EMAIL_LEN_MAX
   *    <br/>
   *    Regex:  EDAM_EMAIL_REGEX
   *    </dd>
   * 
   *  <dt>name</dt>
   *    <dd>The printable name of the user, which may be a combination
   *    of given and family names.  This is used instead of separate "first"
   *    and "last" names due to variations in international name format/order.
   *    May not start or end with a whitespace character.  May contain any
   *    character but carriage return or newline (Unicode classes Zl and Zp).
   *    <br/>
   *    Length:  EDAM_USER_NAME_LEN_MIN - EDAM_USER_NAME_LEN_MAX
   *    <br/>
   *    Regex:  EDAM_USER_NAME_REGEX
   *    </dd>
   * 
   *  <dt>timezone</dt>
   *    <dd>The zone ID for the user's default location.  If present,
   *    this may be used to localize the display of any timestamp for which no
   *    other timezone is available - for example, an note that arrives via
   *    a micro-browser may not contain enough information to display its
   *    local time, so this default timezone may be assigned to the note.
   *    The format must be encoded as a standard zone ID such as
   *    "America/Los_Angeles" or "GMT+08:00"
   *    <br/>
   *    Length:  EDAM_TIMEZONE_LEN_MIN - EDAM_TIMEZONE_LEN_MAX
   *    <br/>
   *    Regex:  EDAM_TIMEZONE_REGEX
   *    </dd>
   * 
   *  <dt>privilege</dt>
   *    <dd>The level of access permitted for the user.
   *    </dd>
   * 
   *  <dt>created</dt>
   *    <dd>The date and time when this user account was created in the
   *    service.
   *    </dd>
   * 
   *  <dt>updated</dt>
   *    <dd>The date and time when this user account was last modified
   *    in the service.
   *    </dd>
   * 
   *  <dt>deleted</dt>
   *    <dd>If the account has been deleted from the system (e.g. as
   *    the result of a legal request by the user), the date and time of the
   *    deletion will be represented here.  If not, this value will not be set.
   *    </dd>
   * 
   *  <dt>active</dt>
   *    <dd>If the user account is available for login and
   *    synchronization, this flag will be set to true.
   *    </dd>
   * 
   *  <dt>shardId</dt>
   *    <dd>The name of the virtual server that manages the state of
   *    this user.  This value is used internally to determine which system should
   *    service requests about this user's data.
   *    </dd>
   * 
   *  <dt>attributes</dt>
   *    <dd>If present, this will contain a list of the attributes
   *    for this user account.
   *    </dd>
   * 
   *  <dt>accounting</dt>
   *    <dd>Bookkeeping information for the user's subscription.
   *    </dd>
   *  </dl>
   */
  public class User implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("User");
    private static const ID_FIELD_DESC:TField = new TField("id", TType.I32, 1);
    private static const USERNAME_FIELD_DESC:TField = new TField("username", TType.STRING, 2);
    private static const EMAIL_FIELD_DESC:TField = new TField("email", TType.STRING, 3);
    private static const NAME_FIELD_DESC:TField = new TField("name", TType.STRING, 4);
    private static const TIMEZONE_FIELD_DESC:TField = new TField("timezone", TType.STRING, 6);
    private static const PRIVILEGE_FIELD_DESC:TField = new TField("privilege", TType.I32, 7);
    private static const CREATED_FIELD_DESC:TField = new TField("created", TType.I64, 9);
    private static const UPDATED_FIELD_DESC:TField = new TField("updated", TType.I64, 10);
    private static const DELETED_FIELD_DESC:TField = new TField("deleted", TType.I64, 11);
    private static const ACTIVE_FIELD_DESC:TField = new TField("active", TType.BOOL, 13);
    private static const SHARD_ID_FIELD_DESC:TField = new TField("shardId", TType.STRING, 14);
    private static const ATTRIBUTES_FIELD_DESC:TField = new TField("attributes", TType.STRUCT, 15);
    private static const ACCOUNTING_FIELD_DESC:TField = new TField("accounting", TType.STRUCT, 16);

    private var _id:int;
    public static const ID:int = 1;
    private var _username:String;
    public static const USERNAME:int = 2;
    private var _email:String;
    public static const EMAIL:int = 3;
    private var _name:String;
    public static const NAME:int = 4;
    private var _timezone:String;
    public static const TIMEZONE:int = 6;
    private var _privilege:int;
    public static const PRIVILEGE:int = 7;
    private var _created:BigInteger;
    public static const CREATED:int = 9;
    private var _updated:BigInteger;
    public static const UPDATED:int = 10;
    private var _deleted:BigInteger;
    public static const DELETED:int = 11;
    private var _active:Boolean;
    public static const ACTIVE:int = 13;
    private var _shardId:String;
    public static const SHARDID:int = 14;
    private var _attributes:UserAttributes;
    public static const ATTRIBUTES:int = 15;
    private var _accounting:Accounting;
    public static const ACCOUNTING:int = 16;

    private var __isset_id:Boolean = false;
    private var __isset_privilege:Boolean = false;
    private var __isset_created:Boolean = false;
    private var __isset_updated:Boolean = false;
    private var __isset_deleted:Boolean = false;
    private var __isset_active:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ID] = new FieldMetaData("id", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[USERNAME] = new FieldMetaData("username", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[EMAIL] = new FieldMetaData("email", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[NAME] = new FieldMetaData("name", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[TIMEZONE] = new FieldMetaData("timezone", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PRIVILEGE] = new FieldMetaData("privilege", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[CREATED] = new FieldMetaData("created", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[UPDATED] = new FieldMetaData("updated", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[DELETED] = new FieldMetaData("deleted", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[ACTIVE] = new FieldMetaData("active", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[SHARDID] = new FieldMetaData("shardId", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[ATTRIBUTES] = new FieldMetaData("attributes", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, UserAttributes));
      metaDataMap[ACCOUNTING] = new FieldMetaData("accounting", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, Accounting));
    }
    {
      FieldMetaData.addStructMetaDataMap(User, metaDataMap);
    }

    public function User() {
    }

    public function get id():int {
      return this._id;
    }

    public function set id(id:int):void {
      this._id = id;
      this.__isset_id = true;
    }

    public function unsetId():void {
      this.__isset_id = false;
    }

    // Returns true if field id is set (has been assigned a value) and false otherwise
    public function isSetId():Boolean {
      return this.__isset_id;
    }

    public function get username():String {
      return this._username;
    }

    public function set username(username:String):void {
      this._username = username;
    }

    public function unsetUsername():void {
      this.username = null;
    }

    // Returns true if field username is set (has been assigned a value) and false otherwise
    public function isSetUsername():Boolean {
      return this.username != null;
    }

    public function get email():String {
      return this._email;
    }

    public function set email(email:String):void {
      this._email = email;
    }

    public function unsetEmail():void {
      this.email = null;
    }

    // Returns true if field email is set (has been assigned a value) and false otherwise
    public function isSetEmail():Boolean {
      return this.email != null;
    }

    public function get name():String {
      return this._name;
    }

    public function set name(name:String):void {
      this._name = name;
    }

    public function unsetName():void {
      this.name = null;
    }

    // Returns true if field name is set (has been assigned a value) and false otherwise
    public function isSetName():Boolean {
      return this.name != null;
    }

    public function get timezone():String {
      return this._timezone;
    }

    public function set timezone(timezone:String):void {
      this._timezone = timezone;
    }

    public function unsetTimezone():void {
      this.timezone = null;
    }

    // Returns true if field timezone is set (has been assigned a value) and false otherwise
    public function isSetTimezone():Boolean {
      return this.timezone != null;
    }

    public function get privilege():int {
      return this._privilege;
    }

    public function set privilege(privilege:int):void {
      this._privilege = privilege;
      this.__isset_privilege = true;
    }

    public function unsetPrivilege():void {
      this.__isset_privilege = false;
    }

    // Returns true if field privilege is set (has been assigned a value) and false otherwise
    public function isSetPrivilege():Boolean {
      return this.__isset_privilege;
    }

    public function get created():BigInteger {
      return this._created;
    }

    public function set created(created:BigInteger):void {
      this._created = created;
      this.__isset_created = true;
    }

    public function unsetCreated():void {
      this.__isset_created = false;
    }

    // Returns true if field created is set (has been assigned a value) and false otherwise
    public function isSetCreated():Boolean {
      return this.__isset_created;
    }

    public function get updated():BigInteger {
      return this._updated;
    }

    public function set updated(updated:BigInteger):void {
      this._updated = updated;
      this.__isset_updated = true;
    }

    public function unsetUpdated():void {
      this.__isset_updated = false;
    }

    // Returns true if field updated is set (has been assigned a value) and false otherwise
    public function isSetUpdated():Boolean {
      return this.__isset_updated;
    }

    public function get deleted():BigInteger {
      return this._deleted;
    }

    public function set deleted(deleted:BigInteger):void {
      this._deleted = deleted;
      this.__isset_deleted = true;
    }

    public function unsetDeleted():void {
      this.__isset_deleted = false;
    }

    // Returns true if field deleted is set (has been assigned a value) and false otherwise
    public function isSetDeleted():Boolean {
      return this.__isset_deleted;
    }

    public function get active():Boolean {
      return this._active;
    }

    public function set active(active:Boolean):void {
      this._active = active;
      this.__isset_active = true;
    }

    public function unsetActive():void {
      this.__isset_active = false;
    }

    // Returns true if field active is set (has been assigned a value) and false otherwise
    public function isSetActive():Boolean {
      return this.__isset_active;
    }

    public function get shardId():String {
      return this._shardId;
    }

    public function set shardId(shardId:String):void {
      this._shardId = shardId;
    }

    public function unsetShardId():void {
      this.shardId = null;
    }

    // Returns true if field shardId is set (has been assigned a value) and false otherwise
    public function isSetShardId():Boolean {
      return this.shardId != null;
    }

    public function get attributes():UserAttributes {
      return this._attributes;
    }

    public function set attributes(attributes:UserAttributes):void {
      this._attributes = attributes;
    }

    public function unsetAttributes():void {
      this.attributes = null;
    }

    // Returns true if field attributes is set (has been assigned a value) and false otherwise
    public function isSetAttributes():Boolean {
      return this.attributes != null;
    }

    public function get accounting():Accounting {
      return this._accounting;
    }

    public function set accounting(accounting:Accounting):void {
      this._accounting = accounting;
    }

    public function unsetAccounting():void {
      this.accounting = null;
    }

    // Returns true if field accounting is set (has been assigned a value) and false otherwise
    public function isSetAccounting():Boolean {
      return this.accounting != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          this.username = value;
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          this.email = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case TIMEZONE:
        if (value == null) {
          unsetTimezone();
        } else {
          this.timezone = value;
        }
        break;

      case PRIVILEGE:
        if (value == null) {
          unsetPrivilege();
        } else {
          this.privilege = value;
        }
        break;

      case CREATED:
        if (value == null) {
          unsetCreated();
        } else {
          this.created = value;
        }
        break;

      case UPDATED:
        if (value == null) {
          unsetUpdated();
        } else {
          this.updated = value;
        }
        break;

      case DELETED:
        if (value == null) {
          unsetDeleted();
        } else {
          this.deleted = value;
        }
        break;

      case ACTIVE:
        if (value == null) {
          unsetActive();
        } else {
          this.active = value;
        }
        break;

      case SHARDID:
        if (value == null) {
          unsetShardId();
        } else {
          this.shardId = value;
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          this.attributes = value;
        }
        break;

      case ACCOUNTING:
        if (value == null) {
          unsetAccounting();
        } else {
          this.accounting = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ID:
        return this.id;
      case USERNAME:
        return this.username;
      case EMAIL:
        return this.email;
      case NAME:
        return this.name;
      case TIMEZONE:
        return this.timezone;
      case PRIVILEGE:
        return this.privilege;
      case CREATED:
        return this.created;
      case UPDATED:
        return this.updated;
      case DELETED:
        return this.deleted;
      case ACTIVE:
        return this.active;
      case SHARDID:
        return this.shardId;
      case ATTRIBUTES:
        return this.attributes;
      case ACCOUNTING:
        return this.accounting;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ID:
        return isSetId();
      case USERNAME:
        return isSetUsername();
      case EMAIL:
        return isSetEmail();
      case NAME:
        return isSetName();
      case TIMEZONE:
        return isSetTimezone();
      case PRIVILEGE:
        return isSetPrivilege();
      case CREATED:
        return isSetCreated();
      case UPDATED:
        return isSetUpdated();
      case DELETED:
        return isSetDeleted();
      case ACTIVE:
        return isSetActive();
      case SHARDID:
        return isSetShardId();
      case ATTRIBUTES:
        return isSetAttributes();
      case ACCOUNTING:
        return isSetAccounting();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID:
            if (field.type == TType.I32) {
              this.id = iprot.readI32();
              this.__isset_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EMAIL:
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TIMEZONE:
            if (field.type == TType.STRING) {
              this.timezone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGE:
            if (field.type == TType.I32) {
              this.privilege = iprot.readI32();
              this.__isset_privilege = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CREATED:
            if (field.type == TType.I64) {
              this.created = iprot.readI64();
              this.__isset_created = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATED:
            if (field.type == TType.I64) {
              this.updated = iprot.readI64();
              this.__isset_updated = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DELETED:
            if (field.type == TType.I64) {
              this.deleted = iprot.readI64();
              this.__isset_deleted = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ACTIVE:
            if (field.type == TType.BOOL) {
              this.active = iprot.readBool();
              this.__isset_active = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SHARDID:
            if (field.type == TType.STRING) {
              this.shardId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ATTRIBUTES:
            if (field.type == TType.STRUCT) {
              this.attributes = new UserAttributes();
              this.attributes.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ACCOUNTING:
            if (field.type == TType.STRUCT) {
              this.accounting = new Accounting();
              this.accounting.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(this.id);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        if (isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(this.username);
          oprot.writeFieldEnd();
        }
      }
      if (this.email != null) {
        if (isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(this.email);
          oprot.writeFieldEnd();
        }
      }
      if (this.name != null) {
        if (isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(this.name);
          oprot.writeFieldEnd();
        }
      }
      if (this.timezone != null) {
        if (isSetTimezone()) {
          oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
          oprot.writeString(this.timezone);
          oprot.writeFieldEnd();
        }
      }
      if (isSetPrivilege()) {
        oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
        oprot.writeI32(this.privilege);
        oprot.writeFieldEnd();
      }
      if (isSetCreated()) {
        oprot.writeFieldBegin(CREATED_FIELD_DESC);
        oprot.writeI64(this.created);
        oprot.writeFieldEnd();
      }
      if (isSetUpdated()) {
        oprot.writeFieldBegin(UPDATED_FIELD_DESC);
        oprot.writeI64(this.updated);
        oprot.writeFieldEnd();
      }
      if (isSetDeleted()) {
        oprot.writeFieldBegin(DELETED_FIELD_DESC);
        oprot.writeI64(this.deleted);
        oprot.writeFieldEnd();
      }
      if (isSetActive()) {
        oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
        oprot.writeBool(this.active);
        oprot.writeFieldEnd();
      }
      if (this.shardId != null) {
        if (isSetShardId()) {
          oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
          oprot.writeString(this.shardId);
          oprot.writeFieldEnd();
        }
      }
      if (this.attributes != null) {
        if (isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          this.attributes.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (this.accounting != null) {
        if (isSetAccounting()) {
          oprot.writeFieldBegin(ACCOUNTING_FIELD_DESC);
          this.accounting.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("User(");
      var first:Boolean = true;

      if (isSetId()) {
        ret += "id:";
        ret += this.id;
        first = false;
      }
      if (isSetUsername()) {
        if (!first) ret +=  ", ";
        ret += "username:";
        if (this.username == null) {
          ret += "null";
        } else {
          ret += this.username;
        }
        first = false;
      }
      if (isSetEmail()) {
        if (!first) ret +=  ", ";
        ret += "email:";
        if (this.email == null) {
          ret += "null";
        } else {
          ret += this.email;
        }
        first = false;
      }
      if (isSetName()) {
        if (!first) ret +=  ", ";
        ret += "name:";
        if (this.name == null) {
          ret += "null";
        } else {
          ret += this.name;
        }
        first = false;
      }
      if (isSetTimezone()) {
        if (!first) ret +=  ", ";
        ret += "timezone:";
        if (this.timezone == null) {
          ret += "null";
        } else {
          ret += this.timezone;
        }
        first = false;
      }
      if (isSetPrivilege()) {
        if (!first) ret +=  ", ";
        ret += "privilege:";
        var privilege_name:String = PrivilegeLevel.VALUES_TO_NAMES[this.privilege];
        if (privilege_name != null) {
          ret += privilege_name;
          ret += " (";
        }
        ret += this.privilege;
        if (privilege_name != null) {
          ret += ")";
        }
        first = false;
      }
      if (isSetCreated()) {
        if (!first) ret +=  ", ";
        ret += "created:";
        ret += this.created;
        first = false;
      }
      if (isSetUpdated()) {
        if (!first) ret +=  ", ";
        ret += "updated:";
        ret += this.updated;
        first = false;
      }
      if (isSetDeleted()) {
        if (!first) ret +=  ", ";
        ret += "deleted:";
        ret += this.deleted;
        first = false;
      }
      if (isSetActive()) {
        if (!first) ret +=  ", ";
        ret += "active:";
        ret += this.active;
        first = false;
      }
      if (isSetShardId()) {
        if (!first) ret +=  ", ";
        ret += "shardId:";
        if (this.shardId == null) {
          ret += "null";
        } else {
          ret += this.shardId;
        }
        first = false;
      }
      if (isSetAttributes()) {
        if (!first) ret +=  ", ";
        ret += "attributes:";
        if (this.attributes == null) {
          ret += "null";
        } else {
          ret += this.attributes;
        }
        first = false;
      }
      if (isSetAccounting()) {
        if (!first) ret +=  ", ";
        ret += "accounting:";
        if (this.accounting == null) {
          ret += "null";
        } else {
          ret += this.accounting;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
      if (isSetPrivilege() && !PrivilegeLevel.VALID_VALUES.contains(privilege)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'privilege' has been assigned the invalid value " + privilege);
      }
    }

  }

}
