/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  /**
   *  A tag within a user's account is a unique name which may be organized
   *  a simple hierarchy.
   * <dl>
   *  <dt>guid</dt>
   *    <dd>The unique identifier of this tag. Will be set by the service,
   *    so may be omitted by the client when creating the Tag.
   *    <br/>
   *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
   *    <br/>
   *    Regex:  EDAM_GUID_REGEX
   *    </dd>
   * 
   *  <dt>name</dt>
   *    <dd>A sequence of characters representing the tag's identifier.
   *    Case is preserved, but is ignored for comparisons.
   *    This means that an account may only have one tag with a given name, via
   *    case-insensitive comparison, so an account may not have both "food" and
   *    "Food" tags.
   *    May not contain a comma (','), and may not begin or end with a space.
   *    <br/>
   *    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
   *    <br/>
   *    Regex:  EDAM_TAG_NAME_REGEX
   *    </dd>
   * 
   *  <dt>parentGuid</dt>
   *    <dd>If this is set, then this is the GUID of the tag that
   *    holds this tag within the tag organizational hierarchy.  If this is
   *    not set, then the tag has no parent and it is a "top level" tag.
   *    Cycles are not allowed (e.g. a->parent->parent == a) and will be
   *    rejected by the service.
   *    <br/>
   *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
   *    <br/>
   *    Regex:  EDAM_GUID_REGEX
   *    </dd>
   * 
   *  <dt>updateSequenceNum</dt>
   *    <dd>A number identifying the last transaction to
   *    modify the state of this object.  The USN values are sequential within an
   *    account, and can be used to compare the order of modifications within the
   *    service.
   *    </dd>
   *  </dl>
   */
  public class Tag implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("Tag");
    private static const GUID_FIELD_DESC:TField = new TField("guid", TType.STRING, 1);
    private static const NAME_FIELD_DESC:TField = new TField("name", TType.STRING, 2);
    private static const PARENT_GUID_FIELD_DESC:TField = new TField("parentGuid", TType.STRING, 3);
    private static const UPDATE_SEQUENCE_NUM_FIELD_DESC:TField = new TField("updateSequenceNum", TType.I32, 4);

    private var _guid:String;
    public static const GUID:int = 1;
    private var _name:String;
    public static const NAME:int = 2;
    private var _parentGuid:String;
    public static const PARENTGUID:int = 3;
    private var _updateSequenceNum:int;
    public static const UPDATESEQUENCENUM:int = 4;

    private var __isset_updateSequenceNum:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[GUID] = new FieldMetaData("guid", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[NAME] = new FieldMetaData("name", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PARENTGUID] = new FieldMetaData("parentGuid", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[UPDATESEQUENCENUM] = new FieldMetaData("updateSequenceNum", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(Tag, metaDataMap);
    }

    public function Tag() {
    }

    public function get guid():String {
      return this._guid;
    }

    public function set guid(guid:String):void {
      this._guid = guid;
    }

    public function unsetGuid():void {
      this.guid = null;
    }

    // Returns true if field guid is set (has been assigned a value) and false otherwise
    public function isSetGuid():Boolean {
      return this.guid != null;
    }

    public function get name():String {
      return this._name;
    }

    public function set name(name:String):void {
      this._name = name;
    }

    public function unsetName():void {
      this.name = null;
    }

    // Returns true if field name is set (has been assigned a value) and false otherwise
    public function isSetName():Boolean {
      return this.name != null;
    }

    public function get parentGuid():String {
      return this._parentGuid;
    }

    public function set parentGuid(parentGuid:String):void {
      this._parentGuid = parentGuid;
    }

    public function unsetParentGuid():void {
      this.parentGuid = null;
    }

    // Returns true if field parentGuid is set (has been assigned a value) and false otherwise
    public function isSetParentGuid():Boolean {
      return this.parentGuid != null;
    }

    public function get updateSequenceNum():int {
      return this._updateSequenceNum;
    }

    public function set updateSequenceNum(updateSequenceNum:int):void {
      this._updateSequenceNum = updateSequenceNum;
      this.__isset_updateSequenceNum = true;
    }

    public function unsetUpdateSequenceNum():void {
      this.__isset_updateSequenceNum = false;
    }

    // Returns true if field updateSequenceNum is set (has been assigned a value) and false otherwise
    public function isSetUpdateSequenceNum():Boolean {
      return this.__isset_updateSequenceNum;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          this.guid = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case PARENTGUID:
        if (value == null) {
          unsetParentGuid();
        } else {
          this.parentGuid = value;
        }
        break;

      case UPDATESEQUENCENUM:
        if (value == null) {
          unsetUpdateSequenceNum();
        } else {
          this.updateSequenceNum = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case GUID:
        return this.guid;
      case NAME:
        return this.name;
      case PARENTGUID:
        return this.parentGuid;
      case UPDATESEQUENCENUM:
        return this.updateSequenceNum;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case GUID:
        return isSetGuid();
      case NAME:
        return isSetName();
      case PARENTGUID:
        return isSetParentGuid();
      case UPDATESEQUENCENUM:
        return isSetUpdateSequenceNum();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case GUID:
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PARENTGUID:
            if (field.type == TType.STRING) {
              this.parentGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATESEQUENCENUM:
            if (field.type == TType.I32) {
              this.updateSequenceNum = iprot.readI32();
              this.__isset_updateSequenceNum = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.guid != null) {
        if (isSetGuid()) {
          oprot.writeFieldBegin(GUID_FIELD_DESC);
          oprot.writeString(this.guid);
          oprot.writeFieldEnd();
        }
      }
      if (this.name != null) {
        if (isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(this.name);
          oprot.writeFieldEnd();
        }
      }
      if (this.parentGuid != null) {
        if (isSetParentGuid()) {
          oprot.writeFieldBegin(PARENT_GUID_FIELD_DESC);
          oprot.writeString(this.parentGuid);
          oprot.writeFieldEnd();
        }
      }
      if (isSetUpdateSequenceNum()) {
        oprot.writeFieldBegin(UPDATE_SEQUENCE_NUM_FIELD_DESC);
        oprot.writeI32(this.updateSequenceNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("Tag(");
      var first:Boolean = true;

      if (isSetGuid()) {
        ret += "guid:";
        if (this.guid == null) {
          ret += "null";
        } else {
          ret += this.guid;
        }
        first = false;
      }
      if (isSetName()) {
        if (!first) ret +=  ", ";
        ret += "name:";
        if (this.name == null) {
          ret += "null";
        } else {
          ret += this.name;
        }
        first = false;
      }
      if (isSetParentGuid()) {
        if (!first) ret +=  ", ";
        ret += "parentGuid:";
        if (this.parentGuid == null) {
          ret += "null";
        } else {
          ret += this.parentGuid;
        }
        first = false;
      }
      if (isSetUpdateSequenceNum()) {
        if (!first) ret +=  ", ";
        ret += "updateSequenceNum:";
        ret += this.updateSequenceNum;
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
