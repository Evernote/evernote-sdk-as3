/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  /**
   *  A structure holding the optional attributes that can be stored
   *  on a User.  These are generally less critical than the core User fields.
   * 
   * <dl>
   *  <dt>defaultLocationName</dt>
   *    <dd>the location string that should be associated
   *    with the user in order to determine where notes are taken if not otherwise
   *    specified.<br/>
   *    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
   *    </dd>
   * 
   *  <dt>defaultLatitude</dt>
   *    <dd>if set, this is the latitude that should be
   *    assigned to any notes that have no other latitude information.
   *    </dd>
   * 
   *  <dt>defaultLongitude</dt>
   *    <dd>if set, this is the longitude that should be
   *    assigned to any notes that have no other longitude information.
   *    </dd>
   * 
   *  <dt>preactivation</dt>
   *    <dd>if set, the user account is not yet confirmed for
   *    login.  I.e. the account has been created, but we are still waiting for
   *    the user to complete the activation step.
   *    </dd>
   * 
   *  <dt>viewedPromotions</dt>
   *    <dd>a list of promotions the user has seen.
   *     This list may occasionally be modified by the system when promotions are
   *     no longer available.<br/>
   *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
   *    </dd>
   * 
   *  <dt>incomingEmailAddress</dt>
   *    <dd>if set, this is the email address that the
   *     user may send email to in order to add an email note directly into the
   *     account via the SMTP email gateway.  This is the part of the email
   *     address before the '@' symbol ... our domain is not included.
   *     If this is not set, the user may not add notes via the gateway.<br/>
   *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
   *    </dd>
   * 
   *  <dt>recentMailedAddresses</dt>
   *    <dd>if set, this will contain a list of email
   *     addresses that have recently been used as recipients
   *     of outbound emails by the user.  This can be used to pre-populate a
   *     list of possible destinations when a user wishes to send a note via
   *     email.<br/>
   *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX each<br/>
   *     Max:  EDAM_USER_RECENT_MAILED_ADDRESSES_MAX entries
   *    </dd>
   * 
   *  <dt>comments</dt>
   *    <dd>Free-form text field that may hold general support
   *     information, etc.<br/>
   *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
   *    </dd>
   * 
   *  <dt>dateAgreedToTermsOfService</dt>
   *    <dd>The date/time when the user agreed to
   *     the terms of service.  This can be used as the effective "start date"
   *     for the account.
   *    </dd>
   * 
   *  <dt>maxReferrals</dt>
   *    <dd>The number of referrals that the user is permitted
   *     to make.
   *    </dd>
   * 
   *  <dt>referralCount</dt>
   *    <dd>The number of referrals sent from this account.
   *    </dd>
   * 
   *  <dt>refererCode</dt>
   *    <dd>A code indicating where the user was sent from. AKA
   *     promotion code
   *    </dd>
   * 
   *  <dt>sentEmailDate</dt>
   *    <dd>The most recent date when the user sent outbound
   *     emails from the service.  Used with sentEmailCount to limit the number
   *     of emails that can be sent per day.
   *    </dd>
   * 
   *  <dt>sentEmailCount</dt>
   *    <dd>The number of emails that were sent from the user
   *     via the service on sentEmailDate.  Used to enforce a limit on the number
   *     of emails per user per day to prevent spamming.
   *    </dd>
   * 
   *  <dt>dailyEmailLimit</dt>
   *    <dd>If set, this is the maximum number of emails that
   *     may be sent in a given day from this account.  If unset, the server will
   *     use the configured default limit.
   *    </dd>
   * 
   *  <dt>emailOptOutDate</dt>
   *    <dd>If set, this is the date when the user asked
   *     to be excluded from offers and promotions sent by Evernote.  If not set,
   *     then the user currently agrees to receive these messages.
   *    </dd>
   * 
   *  <dt>partnerEmailOptInDate</dt>
   *    <dd>If set, this is the date when the user asked
   *     to be included in offers and promotions sent by Evernote's partners.
   *     If not sent, then the user currently does not agree to receive these
   *     emails.
   *    </dd>
   * 
   *  <dt>preferredLanguage</dt>
   *    <dd>a 2 character language codes based on:
   *        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt used for
   *       localization purposes to determine what language to use for the web
   *       interface and for other direct communication (e.g. emails).
   *    </dd>
   * 
   *  <dt>preferredCountry</dt>
   *    <dd>Preferred country code based on ISO 3166-1-alpha-2 indicating the
   *    users preferred country</dd>
   * 
   *  <dt>clipFullPage</dt>
   *    <dd>Boolean flag set to true if the user wants to clip full pages by
   *    default when they use the web clipper without a selection.</dd>
   * 
   *  <dt>twitterUserName</dt>
   *    <dd>The username of the account of someone who has chosen to enable
   *    Twittering into Evernote.  This value is subject to change, since users
   *    may change their Twitter user name.</dd>
   * 
   *  <dt>twitterId</dt>
   *    <dd>The unique identifier of the user's Twitter account if that user
   *    has chosen to enable Twittering into Evernote.</dd>
   * 
   *  <dt>groupName</dt>
   *    <dd>A name identifier used to identify a particular set of branding and
   *     light customization.</dd>
   * 
   *  <dt>recognitionLanguage</dt>
   *    <dd>a 2 character language codes based on:
   *        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt
   *        If set, this is used to determine the language that should be used
   *        when processing images and PDF files to find text.
   *        If not set, then the 'preferredLanguage' will be used.
   *    </dd>
   * 
   *  <dt>customerProfileId</dt>
   *    <dd>a numeric identified which provides a linkage between the user record
   *        and the direct credit card payment creditcard profile.
   *    </dd>
   * 
   *  <dt>educationalInstitution</dt>
   *    <dd>a flag indicating that the user is part of an educational institution which
   *    makes them eligible for discounts on bulk purchases
   *    </dd>
   * 
   *  <dt>businessAddress</dt>
   *    <dd>A string recording the business address of a Sponsored Account user who has requested invoicing.
   *    </dd>
   *  </dl>
   * 
   *  <dt>hideSponsorBilling</dt>
   *    <dd>A flag indicating whether to hide the billing information on a sponsored
   *        account owner's settings page
   *    </dd>
   *  </dl>
   */
  public class UserAttributes implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("UserAttributes");
    private static const DEFAULT_LOCATION_NAME_FIELD_DESC:TField = new TField("defaultLocationName", TType.STRING, 1);
    private static const DEFAULT_LATITUDE_FIELD_DESC:TField = new TField("defaultLatitude", TType.DOUBLE, 2);
    private static const DEFAULT_LONGITUDE_FIELD_DESC:TField = new TField("defaultLongitude", TType.DOUBLE, 3);
    private static const PREACTIVATION_FIELD_DESC:TField = new TField("preactivation", TType.BOOL, 4);
    private static const VIEWED_PROMOTIONS_FIELD_DESC:TField = new TField("viewedPromotions", TType.LIST, 5);
    private static const INCOMING_EMAIL_ADDRESS_FIELD_DESC:TField = new TField("incomingEmailAddress", TType.STRING, 6);
    private static const RECENT_MAILED_ADDRESSES_FIELD_DESC:TField = new TField("recentMailedAddresses", TType.LIST, 7);
    private static const COMMENTS_FIELD_DESC:TField = new TField("comments", TType.STRING, 9);
    private static const DATE_AGREED_TO_TERMS_OF_SERVICE_FIELD_DESC:TField = new TField("dateAgreedToTermsOfService", TType.I64, 11);
    private static const MAX_REFERRALS_FIELD_DESC:TField = new TField("maxReferrals", TType.I32, 12);
    private static const REFERRAL_COUNT_FIELD_DESC:TField = new TField("referralCount", TType.I32, 13);
    private static const REFERER_CODE_FIELD_DESC:TField = new TField("refererCode", TType.STRING, 14);
    private static const SENT_EMAIL_DATE_FIELD_DESC:TField = new TField("sentEmailDate", TType.I64, 15);
    private static const SENT_EMAIL_COUNT_FIELD_DESC:TField = new TField("sentEmailCount", TType.I32, 16);
    private static const DAILY_EMAIL_LIMIT_FIELD_DESC:TField = new TField("dailyEmailLimit", TType.I32, 17);
    private static const EMAIL_OPT_OUT_DATE_FIELD_DESC:TField = new TField("emailOptOutDate", TType.I64, 18);
    private static const PARTNER_EMAIL_OPT_IN_DATE_FIELD_DESC:TField = new TField("partnerEmailOptInDate", TType.I64, 19);
    private static const PREFERRED_LANGUAGE_FIELD_DESC:TField = new TField("preferredLanguage", TType.STRING, 20);
    private static const PREFERRED_COUNTRY_FIELD_DESC:TField = new TField("preferredCountry", TType.STRING, 21);
    private static const CLIP_FULL_PAGE_FIELD_DESC:TField = new TField("clipFullPage", TType.BOOL, 22);
    private static const TWITTER_USER_NAME_FIELD_DESC:TField = new TField("twitterUserName", TType.STRING, 23);
    private static const TWITTER_ID_FIELD_DESC:TField = new TField("twitterId", TType.STRING, 24);
    private static const GROUP_NAME_FIELD_DESC:TField = new TField("groupName", TType.STRING, 25);
    private static const RECOGNITION_LANGUAGE_FIELD_DESC:TField = new TField("recognitionLanguage", TType.STRING, 26);
    private static const CUSTOMER_PROFILE_ID_FIELD_DESC:TField = new TField("customerProfileId", TType.I64, 27);
    private static const REFERRAL_PROOF_FIELD_DESC:TField = new TField("referralProof", TType.STRING, 28);
    private static const EDUCATIONAL_DISCOUNT_FIELD_DESC:TField = new TField("educationalDiscount", TType.BOOL, 29);
    private static const BUSINESS_ADDRESS_FIELD_DESC:TField = new TField("businessAddress", TType.STRING, 30);
    private static const HIDE_SPONSOR_BILLING_FIELD_DESC:TField = new TField("hideSponsorBilling", TType.BOOL, 31);

    private var _defaultLocationName:String;
    public static const DEFAULTLOCATIONNAME:int = 1;
    private var _defaultLatitude:Number;
    public static const DEFAULTLATITUDE:int = 2;
    private var _defaultLongitude:Number;
    public static const DEFAULTLONGITUDE:int = 3;
    private var _preactivation:Boolean;
    public static const PREACTIVATION:int = 4;
    private var _viewedPromotions:Array;
    public static const VIEWEDPROMOTIONS:int = 5;
    private var _incomingEmailAddress:String;
    public static const INCOMINGEMAILADDRESS:int = 6;
    private var _recentMailedAddresses:Array;
    public static const RECENTMAILEDADDRESSES:int = 7;
    private var _comments:String;
    public static const COMMENTS:int = 9;
    private var _dateAgreedToTermsOfService:BigInteger;
    public static const DATEAGREEDTOTERMSOFSERVICE:int = 11;
    private var _maxReferrals:int;
    public static const MAXREFERRALS:int = 12;
    private var _referralCount:int;
    public static const REFERRALCOUNT:int = 13;
    private var _refererCode:String;
    public static const REFERERCODE:int = 14;
    private var _sentEmailDate:BigInteger;
    public static const SENTEMAILDATE:int = 15;
    private var _sentEmailCount:int;
    public static const SENTEMAILCOUNT:int = 16;
    private var _dailyEmailLimit:int;
    public static const DAILYEMAILLIMIT:int = 17;
    private var _emailOptOutDate:BigInteger;
    public static const EMAILOPTOUTDATE:int = 18;
    private var _partnerEmailOptInDate:BigInteger;
    public static const PARTNEREMAILOPTINDATE:int = 19;
    private var _preferredLanguage:String;
    public static const PREFERREDLANGUAGE:int = 20;
    private var _preferredCountry:String;
    public static const PREFERREDCOUNTRY:int = 21;
    private var _clipFullPage:Boolean;
    public static const CLIPFULLPAGE:int = 22;
    private var _twitterUserName:String;
    public static const TWITTERUSERNAME:int = 23;
    private var _twitterId:String;
    public static const TWITTERID:int = 24;
    private var _groupName:String;
    public static const GROUPNAME:int = 25;
    private var _recognitionLanguage:String;
    public static const RECOGNITIONLANGUAGE:int = 26;
    private var _customerProfileId:BigInteger;
    public static const CUSTOMERPROFILEID:int = 27;
    private var _referralProof:String;
    public static const REFERRALPROOF:int = 28;
    private var _educationalDiscount:Boolean;
    public static const EDUCATIONALDISCOUNT:int = 29;
    private var _businessAddress:String;
    public static const BUSINESSADDRESS:int = 30;
    private var _hideSponsorBilling:Boolean;
    public static const HIDESPONSORBILLING:int = 31;

    private var __isset_defaultLatitude:Boolean = false;
    private var __isset_defaultLongitude:Boolean = false;
    private var __isset_preactivation:Boolean = false;
    private var __isset_dateAgreedToTermsOfService:Boolean = false;
    private var __isset_maxReferrals:Boolean = false;
    private var __isset_referralCount:Boolean = false;
    private var __isset_sentEmailDate:Boolean = false;
    private var __isset_sentEmailCount:Boolean = false;
    private var __isset_dailyEmailLimit:Boolean = false;
    private var __isset_emailOptOutDate:Boolean = false;
    private var __isset_partnerEmailOptInDate:Boolean = false;
    private var __isset_clipFullPage:Boolean = false;
    private var __isset_customerProfileId:Boolean = false;
    private var __isset_educationalDiscount:Boolean = false;
    private var __isset_hideSponsorBilling:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[DEFAULTLOCATIONNAME] = new FieldMetaData("defaultLocationName", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[DEFAULTLATITUDE] = new FieldMetaData("defaultLatitude", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.DOUBLE));
      metaDataMap[DEFAULTLONGITUDE] = new FieldMetaData("defaultLongitude", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.DOUBLE));
      metaDataMap[PREACTIVATION] = new FieldMetaData("preactivation", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[VIEWEDPROMOTIONS] = new FieldMetaData("viewedPromotions", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING)));
      metaDataMap[INCOMINGEMAILADDRESS] = new FieldMetaData("incomingEmailAddress", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[RECENTMAILEDADDRESSES] = new FieldMetaData("recentMailedAddresses", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING)));
      metaDataMap[COMMENTS] = new FieldMetaData("comments", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[DATEAGREEDTOTERMSOFSERVICE] = new FieldMetaData("dateAgreedToTermsOfService", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[MAXREFERRALS] = new FieldMetaData("maxReferrals", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[REFERRALCOUNT] = new FieldMetaData("referralCount", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[REFERERCODE] = new FieldMetaData("refererCode", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[SENTEMAILDATE] = new FieldMetaData("sentEmailDate", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[SENTEMAILCOUNT] = new FieldMetaData("sentEmailCount", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[DAILYEMAILLIMIT] = new FieldMetaData("dailyEmailLimit", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[EMAILOPTOUTDATE] = new FieldMetaData("emailOptOutDate", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[PARTNEREMAILOPTINDATE] = new FieldMetaData("partnerEmailOptInDate", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[PREFERREDLANGUAGE] = new FieldMetaData("preferredLanguage", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PREFERREDCOUNTRY] = new FieldMetaData("preferredCountry", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[CLIPFULLPAGE] = new FieldMetaData("clipFullPage", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[TWITTERUSERNAME] = new FieldMetaData("twitterUserName", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[TWITTERID] = new FieldMetaData("twitterId", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[GROUPNAME] = new FieldMetaData("groupName", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[RECOGNITIONLANGUAGE] = new FieldMetaData("recognitionLanguage", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[CUSTOMERPROFILEID] = new FieldMetaData("customerProfileId", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[REFERRALPROOF] = new FieldMetaData("referralProof", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[EDUCATIONALDISCOUNT] = new FieldMetaData("educationalDiscount", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[BUSINESSADDRESS] = new FieldMetaData("businessAddress", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[HIDESPONSORBILLING] = new FieldMetaData("hideSponsorBilling", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
    }
    {
      FieldMetaData.addStructMetaDataMap(UserAttributes, metaDataMap);
    }

    public function UserAttributes() {
    }

    public function get defaultLocationName():String {
      return this._defaultLocationName;
    }

    public function set defaultLocationName(defaultLocationName:String):void {
      this._defaultLocationName = defaultLocationName;
    }

    public function unsetDefaultLocationName():void {
      this.defaultLocationName = null;
    }

    // Returns true if field defaultLocationName is set (has been assigned a value) and false otherwise
    public function isSetDefaultLocationName():Boolean {
      return this.defaultLocationName != null;
    }

    public function get defaultLatitude():Number {
      return this._defaultLatitude;
    }

    public function set defaultLatitude(defaultLatitude:Number):void {
      this._defaultLatitude = defaultLatitude;
      this.__isset_defaultLatitude = true;
    }

    public function unsetDefaultLatitude():void {
      this.__isset_defaultLatitude = false;
    }

    // Returns true if field defaultLatitude is set (has been assigned a value) and false otherwise
    public function isSetDefaultLatitude():Boolean {
      return this.__isset_defaultLatitude;
    }

    public function get defaultLongitude():Number {
      return this._defaultLongitude;
    }

    public function set defaultLongitude(defaultLongitude:Number):void {
      this._defaultLongitude = defaultLongitude;
      this.__isset_defaultLongitude = true;
    }

    public function unsetDefaultLongitude():void {
      this.__isset_defaultLongitude = false;
    }

    // Returns true if field defaultLongitude is set (has been assigned a value) and false otherwise
    public function isSetDefaultLongitude():Boolean {
      return this.__isset_defaultLongitude;
    }

    public function get preactivation():Boolean {
      return this._preactivation;
    }

    public function set preactivation(preactivation:Boolean):void {
      this._preactivation = preactivation;
      this.__isset_preactivation = true;
    }

    public function unsetPreactivation():void {
      this.__isset_preactivation = false;
    }

    // Returns true if field preactivation is set (has been assigned a value) and false otherwise
    public function isSetPreactivation():Boolean {
      return this.__isset_preactivation;
    }

    public function get viewedPromotions():Array {
      return this._viewedPromotions;
    }

    public function set viewedPromotions(viewedPromotions:Array):void {
      this._viewedPromotions = viewedPromotions;
    }

    public function unsetViewedPromotions():void {
      this.viewedPromotions = null;
    }

    // Returns true if field viewedPromotions is set (has been assigned a value) and false otherwise
    public function isSetViewedPromotions():Boolean {
      return this.viewedPromotions != null;
    }

    public function get incomingEmailAddress():String {
      return this._incomingEmailAddress;
    }

    public function set incomingEmailAddress(incomingEmailAddress:String):void {
      this._incomingEmailAddress = incomingEmailAddress;
    }

    public function unsetIncomingEmailAddress():void {
      this.incomingEmailAddress = null;
    }

    // Returns true if field incomingEmailAddress is set (has been assigned a value) and false otherwise
    public function isSetIncomingEmailAddress():Boolean {
      return this.incomingEmailAddress != null;
    }

    public function get recentMailedAddresses():Array {
      return this._recentMailedAddresses;
    }

    public function set recentMailedAddresses(recentMailedAddresses:Array):void {
      this._recentMailedAddresses = recentMailedAddresses;
    }

    public function unsetRecentMailedAddresses():void {
      this.recentMailedAddresses = null;
    }

    // Returns true if field recentMailedAddresses is set (has been assigned a value) and false otherwise
    public function isSetRecentMailedAddresses():Boolean {
      return this.recentMailedAddresses != null;
    }

    public function get comments():String {
      return this._comments;
    }

    public function set comments(comments:String):void {
      this._comments = comments;
    }

    public function unsetComments():void {
      this.comments = null;
    }

    // Returns true if field comments is set (has been assigned a value) and false otherwise
    public function isSetComments():Boolean {
      return this.comments != null;
    }

    public function get dateAgreedToTermsOfService():BigInteger {
      return this._dateAgreedToTermsOfService;
    }

    public function set dateAgreedToTermsOfService(dateAgreedToTermsOfService:BigInteger):void {
      this._dateAgreedToTermsOfService = dateAgreedToTermsOfService;
      this.__isset_dateAgreedToTermsOfService = true;
    }

    public function unsetDateAgreedToTermsOfService():void {
      this.__isset_dateAgreedToTermsOfService = false;
    }

    // Returns true if field dateAgreedToTermsOfService is set (has been assigned a value) and false otherwise
    public function isSetDateAgreedToTermsOfService():Boolean {
      return this.__isset_dateAgreedToTermsOfService;
    }

    public function get maxReferrals():int {
      return this._maxReferrals;
    }

    public function set maxReferrals(maxReferrals:int):void {
      this._maxReferrals = maxReferrals;
      this.__isset_maxReferrals = true;
    }

    public function unsetMaxReferrals():void {
      this.__isset_maxReferrals = false;
    }

    // Returns true if field maxReferrals is set (has been assigned a value) and false otherwise
    public function isSetMaxReferrals():Boolean {
      return this.__isset_maxReferrals;
    }

    public function get referralCount():int {
      return this._referralCount;
    }

    public function set referralCount(referralCount:int):void {
      this._referralCount = referralCount;
      this.__isset_referralCount = true;
    }

    public function unsetReferralCount():void {
      this.__isset_referralCount = false;
    }

    // Returns true if field referralCount is set (has been assigned a value) and false otherwise
    public function isSetReferralCount():Boolean {
      return this.__isset_referralCount;
    }

    public function get refererCode():String {
      return this._refererCode;
    }

    public function set refererCode(refererCode:String):void {
      this._refererCode = refererCode;
    }

    public function unsetRefererCode():void {
      this.refererCode = null;
    }

    // Returns true if field refererCode is set (has been assigned a value) and false otherwise
    public function isSetRefererCode():Boolean {
      return this.refererCode != null;
    }

    public function get sentEmailDate():BigInteger {
      return this._sentEmailDate;
    }

    public function set sentEmailDate(sentEmailDate:BigInteger):void {
      this._sentEmailDate = sentEmailDate;
      this.__isset_sentEmailDate = true;
    }

    public function unsetSentEmailDate():void {
      this.__isset_sentEmailDate = false;
    }

    // Returns true if field sentEmailDate is set (has been assigned a value) and false otherwise
    public function isSetSentEmailDate():Boolean {
      return this.__isset_sentEmailDate;
    }

    public function get sentEmailCount():int {
      return this._sentEmailCount;
    }

    public function set sentEmailCount(sentEmailCount:int):void {
      this._sentEmailCount = sentEmailCount;
      this.__isset_sentEmailCount = true;
    }

    public function unsetSentEmailCount():void {
      this.__isset_sentEmailCount = false;
    }

    // Returns true if field sentEmailCount is set (has been assigned a value) and false otherwise
    public function isSetSentEmailCount():Boolean {
      return this.__isset_sentEmailCount;
    }

    public function get dailyEmailLimit():int {
      return this._dailyEmailLimit;
    }

    public function set dailyEmailLimit(dailyEmailLimit:int):void {
      this._dailyEmailLimit = dailyEmailLimit;
      this.__isset_dailyEmailLimit = true;
    }

    public function unsetDailyEmailLimit():void {
      this.__isset_dailyEmailLimit = false;
    }

    // Returns true if field dailyEmailLimit is set (has been assigned a value) and false otherwise
    public function isSetDailyEmailLimit():Boolean {
      return this.__isset_dailyEmailLimit;
    }

    public function get emailOptOutDate():BigInteger {
      return this._emailOptOutDate;
    }

    public function set emailOptOutDate(emailOptOutDate:BigInteger):void {
      this._emailOptOutDate = emailOptOutDate;
      this.__isset_emailOptOutDate = true;
    }

    public function unsetEmailOptOutDate():void {
      this.__isset_emailOptOutDate = false;
    }

    // Returns true if field emailOptOutDate is set (has been assigned a value) and false otherwise
    public function isSetEmailOptOutDate():Boolean {
      return this.__isset_emailOptOutDate;
    }

    public function get partnerEmailOptInDate():BigInteger {
      return this._partnerEmailOptInDate;
    }

    public function set partnerEmailOptInDate(partnerEmailOptInDate:BigInteger):void {
      this._partnerEmailOptInDate = partnerEmailOptInDate;
      this.__isset_partnerEmailOptInDate = true;
    }

    public function unsetPartnerEmailOptInDate():void {
      this.__isset_partnerEmailOptInDate = false;
    }

    // Returns true if field partnerEmailOptInDate is set (has been assigned a value) and false otherwise
    public function isSetPartnerEmailOptInDate():Boolean {
      return this.__isset_partnerEmailOptInDate;
    }

    public function get preferredLanguage():String {
      return this._preferredLanguage;
    }

    public function set preferredLanguage(preferredLanguage:String):void {
      this._preferredLanguage = preferredLanguage;
    }

    public function unsetPreferredLanguage():void {
      this.preferredLanguage = null;
    }

    // Returns true if field preferredLanguage is set (has been assigned a value) and false otherwise
    public function isSetPreferredLanguage():Boolean {
      return this.preferredLanguage != null;
    }

    public function get preferredCountry():String {
      return this._preferredCountry;
    }

    public function set preferredCountry(preferredCountry:String):void {
      this._preferredCountry = preferredCountry;
    }

    public function unsetPreferredCountry():void {
      this.preferredCountry = null;
    }

    // Returns true if field preferredCountry is set (has been assigned a value) and false otherwise
    public function isSetPreferredCountry():Boolean {
      return this.preferredCountry != null;
    }

    public function get clipFullPage():Boolean {
      return this._clipFullPage;
    }

    public function set clipFullPage(clipFullPage:Boolean):void {
      this._clipFullPage = clipFullPage;
      this.__isset_clipFullPage = true;
    }

    public function unsetClipFullPage():void {
      this.__isset_clipFullPage = false;
    }

    // Returns true if field clipFullPage is set (has been assigned a value) and false otherwise
    public function isSetClipFullPage():Boolean {
      return this.__isset_clipFullPage;
    }

    public function get twitterUserName():String {
      return this._twitterUserName;
    }

    public function set twitterUserName(twitterUserName:String):void {
      this._twitterUserName = twitterUserName;
    }

    public function unsetTwitterUserName():void {
      this.twitterUserName = null;
    }

    // Returns true if field twitterUserName is set (has been assigned a value) and false otherwise
    public function isSetTwitterUserName():Boolean {
      return this.twitterUserName != null;
    }

    public function get twitterId():String {
      return this._twitterId;
    }

    public function set twitterId(twitterId:String):void {
      this._twitterId = twitterId;
    }

    public function unsetTwitterId():void {
      this.twitterId = null;
    }

    // Returns true if field twitterId is set (has been assigned a value) and false otherwise
    public function isSetTwitterId():Boolean {
      return this.twitterId != null;
    }

    public function get groupName():String {
      return this._groupName;
    }

    public function set groupName(groupName:String):void {
      this._groupName = groupName;
    }

    public function unsetGroupName():void {
      this.groupName = null;
    }

    // Returns true if field groupName is set (has been assigned a value) and false otherwise
    public function isSetGroupName():Boolean {
      return this.groupName != null;
    }

    public function get recognitionLanguage():String {
      return this._recognitionLanguage;
    }

    public function set recognitionLanguage(recognitionLanguage:String):void {
      this._recognitionLanguage = recognitionLanguage;
    }

    public function unsetRecognitionLanguage():void {
      this.recognitionLanguage = null;
    }

    // Returns true if field recognitionLanguage is set (has been assigned a value) and false otherwise
    public function isSetRecognitionLanguage():Boolean {
      return this.recognitionLanguage != null;
    }

    public function get customerProfileId():BigInteger {
      return this._customerProfileId;
    }

    public function set customerProfileId(customerProfileId:BigInteger):void {
      this._customerProfileId = customerProfileId;
      this.__isset_customerProfileId = true;
    }

    public function unsetCustomerProfileId():void {
      this.__isset_customerProfileId = false;
    }

    // Returns true if field customerProfileId is set (has been assigned a value) and false otherwise
    public function isSetCustomerProfileId():Boolean {
      return this.__isset_customerProfileId;
    }

    public function get referralProof():String {
      return this._referralProof;
    }

    public function set referralProof(referralProof:String):void {
      this._referralProof = referralProof;
    }

    public function unsetReferralProof():void {
      this.referralProof = null;
    }

    // Returns true if field referralProof is set (has been assigned a value) and false otherwise
    public function isSetReferralProof():Boolean {
      return this.referralProof != null;
    }

    public function get educationalDiscount():Boolean {
      return this._educationalDiscount;
    }

    public function set educationalDiscount(educationalDiscount:Boolean):void {
      this._educationalDiscount = educationalDiscount;
      this.__isset_educationalDiscount = true;
    }

    public function unsetEducationalDiscount():void {
      this.__isset_educationalDiscount = false;
    }

    // Returns true if field educationalDiscount is set (has been assigned a value) and false otherwise
    public function isSetEducationalDiscount():Boolean {
      return this.__isset_educationalDiscount;
    }

    public function get businessAddress():String {
      return this._businessAddress;
    }

    public function set businessAddress(businessAddress:String):void {
      this._businessAddress = businessAddress;
    }

    public function unsetBusinessAddress():void {
      this.businessAddress = null;
    }

    // Returns true if field businessAddress is set (has been assigned a value) and false otherwise
    public function isSetBusinessAddress():Boolean {
      return this.businessAddress != null;
    }

    public function get hideSponsorBilling():Boolean {
      return this._hideSponsorBilling;
    }

    public function set hideSponsorBilling(hideSponsorBilling:Boolean):void {
      this._hideSponsorBilling = hideSponsorBilling;
      this.__isset_hideSponsorBilling = true;
    }

    public function unsetHideSponsorBilling():void {
      this.__isset_hideSponsorBilling = false;
    }

    // Returns true if field hideSponsorBilling is set (has been assigned a value) and false otherwise
    public function isSetHideSponsorBilling():Boolean {
      return this.__isset_hideSponsorBilling;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case DEFAULTLOCATIONNAME:
        if (value == null) {
          unsetDefaultLocationName();
        } else {
          this.defaultLocationName = value;
        }
        break;

      case DEFAULTLATITUDE:
        if (value == null) {
          unsetDefaultLatitude();
        } else {
          this.defaultLatitude = value;
        }
        break;

      case DEFAULTLONGITUDE:
        if (value == null) {
          unsetDefaultLongitude();
        } else {
          this.defaultLongitude = value;
        }
        break;

      case PREACTIVATION:
        if (value == null) {
          unsetPreactivation();
        } else {
          this.preactivation = value;
        }
        break;

      case VIEWEDPROMOTIONS:
        if (value == null) {
          unsetViewedPromotions();
        } else {
          this.viewedPromotions = value;
        }
        break;

      case INCOMINGEMAILADDRESS:
        if (value == null) {
          unsetIncomingEmailAddress();
        } else {
          this.incomingEmailAddress = value;
        }
        break;

      case RECENTMAILEDADDRESSES:
        if (value == null) {
          unsetRecentMailedAddresses();
        } else {
          this.recentMailedAddresses = value;
        }
        break;

      case COMMENTS:
        if (value == null) {
          unsetComments();
        } else {
          this.comments = value;
        }
        break;

      case DATEAGREEDTOTERMSOFSERVICE:
        if (value == null) {
          unsetDateAgreedToTermsOfService();
        } else {
          this.dateAgreedToTermsOfService = value;
        }
        break;

      case MAXREFERRALS:
        if (value == null) {
          unsetMaxReferrals();
        } else {
          this.maxReferrals = value;
        }
        break;

      case REFERRALCOUNT:
        if (value == null) {
          unsetReferralCount();
        } else {
          this.referralCount = value;
        }
        break;

      case REFERERCODE:
        if (value == null) {
          unsetRefererCode();
        } else {
          this.refererCode = value;
        }
        break;

      case SENTEMAILDATE:
        if (value == null) {
          unsetSentEmailDate();
        } else {
          this.sentEmailDate = value;
        }
        break;

      case SENTEMAILCOUNT:
        if (value == null) {
          unsetSentEmailCount();
        } else {
          this.sentEmailCount = value;
        }
        break;

      case DAILYEMAILLIMIT:
        if (value == null) {
          unsetDailyEmailLimit();
        } else {
          this.dailyEmailLimit = value;
        }
        break;

      case EMAILOPTOUTDATE:
        if (value == null) {
          unsetEmailOptOutDate();
        } else {
          this.emailOptOutDate = value;
        }
        break;

      case PARTNEREMAILOPTINDATE:
        if (value == null) {
          unsetPartnerEmailOptInDate();
        } else {
          this.partnerEmailOptInDate = value;
        }
        break;

      case PREFERREDLANGUAGE:
        if (value == null) {
          unsetPreferredLanguage();
        } else {
          this.preferredLanguage = value;
        }
        break;

      case PREFERREDCOUNTRY:
        if (value == null) {
          unsetPreferredCountry();
        } else {
          this.preferredCountry = value;
        }
        break;

      case CLIPFULLPAGE:
        if (value == null) {
          unsetClipFullPage();
        } else {
          this.clipFullPage = value;
        }
        break;

      case TWITTERUSERNAME:
        if (value == null) {
          unsetTwitterUserName();
        } else {
          this.twitterUserName = value;
        }
        break;

      case TWITTERID:
        if (value == null) {
          unsetTwitterId();
        } else {
          this.twitterId = value;
        }
        break;

      case GROUPNAME:
        if (value == null) {
          unsetGroupName();
        } else {
          this.groupName = value;
        }
        break;

      case RECOGNITIONLANGUAGE:
        if (value == null) {
          unsetRecognitionLanguage();
        } else {
          this.recognitionLanguage = value;
        }
        break;

      case CUSTOMERPROFILEID:
        if (value == null) {
          unsetCustomerProfileId();
        } else {
          this.customerProfileId = value;
        }
        break;

      case REFERRALPROOF:
        if (value == null) {
          unsetReferralProof();
        } else {
          this.referralProof = value;
        }
        break;

      case EDUCATIONALDISCOUNT:
        if (value == null) {
          unsetEducationalDiscount();
        } else {
          this.educationalDiscount = value;
        }
        break;

      case BUSINESSADDRESS:
        if (value == null) {
          unsetBusinessAddress();
        } else {
          this.businessAddress = value;
        }
        break;

      case HIDESPONSORBILLING:
        if (value == null) {
          unsetHideSponsorBilling();
        } else {
          this.hideSponsorBilling = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case DEFAULTLOCATIONNAME:
        return this.defaultLocationName;
      case DEFAULTLATITUDE:
        return this.defaultLatitude;
      case DEFAULTLONGITUDE:
        return this.defaultLongitude;
      case PREACTIVATION:
        return this.preactivation;
      case VIEWEDPROMOTIONS:
        return this.viewedPromotions;
      case INCOMINGEMAILADDRESS:
        return this.incomingEmailAddress;
      case RECENTMAILEDADDRESSES:
        return this.recentMailedAddresses;
      case COMMENTS:
        return this.comments;
      case DATEAGREEDTOTERMSOFSERVICE:
        return this.dateAgreedToTermsOfService;
      case MAXREFERRALS:
        return this.maxReferrals;
      case REFERRALCOUNT:
        return this.referralCount;
      case REFERERCODE:
        return this.refererCode;
      case SENTEMAILDATE:
        return this.sentEmailDate;
      case SENTEMAILCOUNT:
        return this.sentEmailCount;
      case DAILYEMAILLIMIT:
        return this.dailyEmailLimit;
      case EMAILOPTOUTDATE:
        return this.emailOptOutDate;
      case PARTNEREMAILOPTINDATE:
        return this.partnerEmailOptInDate;
      case PREFERREDLANGUAGE:
        return this.preferredLanguage;
      case PREFERREDCOUNTRY:
        return this.preferredCountry;
      case CLIPFULLPAGE:
        return this.clipFullPage;
      case TWITTERUSERNAME:
        return this.twitterUserName;
      case TWITTERID:
        return this.twitterId;
      case GROUPNAME:
        return this.groupName;
      case RECOGNITIONLANGUAGE:
        return this.recognitionLanguage;
      case CUSTOMERPROFILEID:
        return this.customerProfileId;
      case REFERRALPROOF:
        return this.referralProof;
      case EDUCATIONALDISCOUNT:
        return this.educationalDiscount;
      case BUSINESSADDRESS:
        return this.businessAddress;
      case HIDESPONSORBILLING:
        return this.hideSponsorBilling;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case DEFAULTLOCATIONNAME:
        return isSetDefaultLocationName();
      case DEFAULTLATITUDE:
        return isSetDefaultLatitude();
      case DEFAULTLONGITUDE:
        return isSetDefaultLongitude();
      case PREACTIVATION:
        return isSetPreactivation();
      case VIEWEDPROMOTIONS:
        return isSetViewedPromotions();
      case INCOMINGEMAILADDRESS:
        return isSetIncomingEmailAddress();
      case RECENTMAILEDADDRESSES:
        return isSetRecentMailedAddresses();
      case COMMENTS:
        return isSetComments();
      case DATEAGREEDTOTERMSOFSERVICE:
        return isSetDateAgreedToTermsOfService();
      case MAXREFERRALS:
        return isSetMaxReferrals();
      case REFERRALCOUNT:
        return isSetReferralCount();
      case REFERERCODE:
        return isSetRefererCode();
      case SENTEMAILDATE:
        return isSetSentEmailDate();
      case SENTEMAILCOUNT:
        return isSetSentEmailCount();
      case DAILYEMAILLIMIT:
        return isSetDailyEmailLimit();
      case EMAILOPTOUTDATE:
        return isSetEmailOptOutDate();
      case PARTNEREMAILOPTINDATE:
        return isSetPartnerEmailOptInDate();
      case PREFERREDLANGUAGE:
        return isSetPreferredLanguage();
      case PREFERREDCOUNTRY:
        return isSetPreferredCountry();
      case CLIPFULLPAGE:
        return isSetClipFullPage();
      case TWITTERUSERNAME:
        return isSetTwitterUserName();
      case TWITTERID:
        return isSetTwitterId();
      case GROUPNAME:
        return isSetGroupName();
      case RECOGNITIONLANGUAGE:
        return isSetRecognitionLanguage();
      case CUSTOMERPROFILEID:
        return isSetCustomerProfileId();
      case REFERRALPROOF:
        return isSetReferralProof();
      case EDUCATIONALDISCOUNT:
        return isSetEducationalDiscount();
      case BUSINESSADDRESS:
        return isSetBusinessAddress();
      case HIDESPONSORBILLING:
        return isSetHideSponsorBilling();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DEFAULTLOCATIONNAME:
            if (field.type == TType.STRING) {
              this.defaultLocationName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEFAULTLATITUDE:
            if (field.type == TType.DOUBLE) {
              this.defaultLatitude = iprot.readDouble();
              this.__isset_defaultLatitude = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEFAULTLONGITUDE:
            if (field.type == TType.DOUBLE) {
              this.defaultLongitude = iprot.readDouble();
              this.__isset_defaultLongitude = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREACTIVATION:
            if (field.type == TType.BOOL) {
              this.preactivation = iprot.readBool();
              this.__isset_preactivation = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case VIEWEDPROMOTIONS:
            if (field.type == TType.LIST) {
              {
                var _list32:TList = iprot.readListBegin();
                this.viewedPromotions = new Array();
                for (var _i33:int = 0; _i33 < _list32.size; ++_i33)
                {
                  var _elem34:String;
                  _elem34 = iprot.readString();
                  this.viewedPromotions.push(_elem34);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INCOMINGEMAILADDRESS:
            if (field.type == TType.STRING) {
              this.incomingEmailAddress = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case RECENTMAILEDADDRESSES:
            if (field.type == TType.LIST) {
              {
                var _list35:TList = iprot.readListBegin();
                this.recentMailedAddresses = new Array();
                for (var _i36:int = 0; _i36 < _list35.size; ++_i36)
                {
                  var _elem37:String;
                  _elem37 = iprot.readString();
                  this.recentMailedAddresses.push(_elem37);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COMMENTS:
            if (field.type == TType.STRING) {
              this.comments = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DATEAGREEDTOTERMSOFSERVICE:
            if (field.type == TType.I64) {
              this.dateAgreedToTermsOfService = iprot.readI64();
              this.__isset_dateAgreedToTermsOfService = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAXREFERRALS:
            if (field.type == TType.I32) {
              this.maxReferrals = iprot.readI32();
              this.__isset_maxReferrals = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case REFERRALCOUNT:
            if (field.type == TType.I32) {
              this.referralCount = iprot.readI32();
              this.__isset_referralCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case REFERERCODE:
            if (field.type == TType.STRING) {
              this.refererCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SENTEMAILDATE:
            if (field.type == TType.I64) {
              this.sentEmailDate = iprot.readI64();
              this.__isset_sentEmailDate = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SENTEMAILCOUNT:
            if (field.type == TType.I32) {
              this.sentEmailCount = iprot.readI32();
              this.__isset_sentEmailCount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DAILYEMAILLIMIT:
            if (field.type == TType.I32) {
              this.dailyEmailLimit = iprot.readI32();
              this.__isset_dailyEmailLimit = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EMAILOPTOUTDATE:
            if (field.type == TType.I64) {
              this.emailOptOutDate = iprot.readI64();
              this.__isset_emailOptOutDate = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PARTNEREMAILOPTINDATE:
            if (field.type == TType.I64) {
              this.partnerEmailOptInDate = iprot.readI64();
              this.__isset_partnerEmailOptInDate = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREFERREDLANGUAGE:
            if (field.type == TType.STRING) {
              this.preferredLanguage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREFERREDCOUNTRY:
            if (field.type == TType.STRING) {
              this.preferredCountry = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CLIPFULLPAGE:
            if (field.type == TType.BOOL) {
              this.clipFullPage = iprot.readBool();
              this.__isset_clipFullPage = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TWITTERUSERNAME:
            if (field.type == TType.STRING) {
              this.twitterUserName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TWITTERID:
            if (field.type == TType.STRING) {
              this.twitterId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case GROUPNAME:
            if (field.type == TType.STRING) {
              this.groupName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case RECOGNITIONLANGUAGE:
            if (field.type == TType.STRING) {
              this.recognitionLanguage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CUSTOMERPROFILEID:
            if (field.type == TType.I64) {
              this.customerProfileId = iprot.readI64();
              this.__isset_customerProfileId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case REFERRALPROOF:
            if (field.type == TType.STRING) {
              this.referralProof = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EDUCATIONALDISCOUNT:
            if (field.type == TType.BOOL) {
              this.educationalDiscount = iprot.readBool();
              this.__isset_educationalDiscount = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case BUSINESSADDRESS:
            if (field.type == TType.STRING) {
              this.businessAddress = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case HIDESPONSORBILLING:
            if (field.type == TType.BOOL) {
              this.hideSponsorBilling = iprot.readBool();
              this.__isset_hideSponsorBilling = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.defaultLocationName != null) {
        if (isSetDefaultLocationName()) {
          oprot.writeFieldBegin(DEFAULT_LOCATION_NAME_FIELD_DESC);
          oprot.writeString(this.defaultLocationName);
          oprot.writeFieldEnd();
        }
      }
      if (isSetDefaultLatitude()) {
        oprot.writeFieldBegin(DEFAULT_LATITUDE_FIELD_DESC);
        oprot.writeDouble(this.defaultLatitude);
        oprot.writeFieldEnd();
      }
      if (isSetDefaultLongitude()) {
        oprot.writeFieldBegin(DEFAULT_LONGITUDE_FIELD_DESC);
        oprot.writeDouble(this.defaultLongitude);
        oprot.writeFieldEnd();
      }
      if (isSetPreactivation()) {
        oprot.writeFieldBegin(PREACTIVATION_FIELD_DESC);
        oprot.writeBool(this.preactivation);
        oprot.writeFieldEnd();
      }
      if (this.viewedPromotions != null) {
        if (isSetViewedPromotions()) {
          oprot.writeFieldBegin(VIEWED_PROMOTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRING, this.viewedPromotions.length));
            for each (var elem38:* in this.viewedPromotions)            {
              oprot.writeString(elem38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.incomingEmailAddress != null) {
        if (isSetIncomingEmailAddress()) {
          oprot.writeFieldBegin(INCOMING_EMAIL_ADDRESS_FIELD_DESC);
          oprot.writeString(this.incomingEmailAddress);
          oprot.writeFieldEnd();
        }
      }
      if (this.recentMailedAddresses != null) {
        if (isSetRecentMailedAddresses()) {
          oprot.writeFieldBegin(RECENT_MAILED_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRING, this.recentMailedAddresses.length));
            for each (var elem39:* in this.recentMailedAddresses)            {
              oprot.writeString(elem39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.comments != null) {
        if (isSetComments()) {
          oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
          oprot.writeString(this.comments);
          oprot.writeFieldEnd();
        }
      }
      if (isSetDateAgreedToTermsOfService()) {
        oprot.writeFieldBegin(DATE_AGREED_TO_TERMS_OF_SERVICE_FIELD_DESC);
        oprot.writeI64(this.dateAgreedToTermsOfService);
        oprot.writeFieldEnd();
      }
      if (isSetMaxReferrals()) {
        oprot.writeFieldBegin(MAX_REFERRALS_FIELD_DESC);
        oprot.writeI32(this.maxReferrals);
        oprot.writeFieldEnd();
      }
      if (isSetReferralCount()) {
        oprot.writeFieldBegin(REFERRAL_COUNT_FIELD_DESC);
        oprot.writeI32(this.referralCount);
        oprot.writeFieldEnd();
      }
      if (this.refererCode != null) {
        if (isSetRefererCode()) {
          oprot.writeFieldBegin(REFERER_CODE_FIELD_DESC);
          oprot.writeString(this.refererCode);
          oprot.writeFieldEnd();
        }
      }
      if (isSetSentEmailDate()) {
        oprot.writeFieldBegin(SENT_EMAIL_DATE_FIELD_DESC);
        oprot.writeI64(this.sentEmailDate);
        oprot.writeFieldEnd();
      }
      if (isSetSentEmailCount()) {
        oprot.writeFieldBegin(SENT_EMAIL_COUNT_FIELD_DESC);
        oprot.writeI32(this.sentEmailCount);
        oprot.writeFieldEnd();
      }
      if (isSetDailyEmailLimit()) {
        oprot.writeFieldBegin(DAILY_EMAIL_LIMIT_FIELD_DESC);
        oprot.writeI32(this.dailyEmailLimit);
        oprot.writeFieldEnd();
      }
      if (isSetEmailOptOutDate()) {
        oprot.writeFieldBegin(EMAIL_OPT_OUT_DATE_FIELD_DESC);
        oprot.writeI64(this.emailOptOutDate);
        oprot.writeFieldEnd();
      }
      if (isSetPartnerEmailOptInDate()) {
        oprot.writeFieldBegin(PARTNER_EMAIL_OPT_IN_DATE_FIELD_DESC);
        oprot.writeI64(this.partnerEmailOptInDate);
        oprot.writeFieldEnd();
      }
      if (this.preferredLanguage != null) {
        if (isSetPreferredLanguage()) {
          oprot.writeFieldBegin(PREFERRED_LANGUAGE_FIELD_DESC);
          oprot.writeString(this.preferredLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (this.preferredCountry != null) {
        if (isSetPreferredCountry()) {
          oprot.writeFieldBegin(PREFERRED_COUNTRY_FIELD_DESC);
          oprot.writeString(this.preferredCountry);
          oprot.writeFieldEnd();
        }
      }
      if (isSetClipFullPage()) {
        oprot.writeFieldBegin(CLIP_FULL_PAGE_FIELD_DESC);
        oprot.writeBool(this.clipFullPage);
        oprot.writeFieldEnd();
      }
      if (this.twitterUserName != null) {
        if (isSetTwitterUserName()) {
          oprot.writeFieldBegin(TWITTER_USER_NAME_FIELD_DESC);
          oprot.writeString(this.twitterUserName);
          oprot.writeFieldEnd();
        }
      }
      if (this.twitterId != null) {
        if (isSetTwitterId()) {
          oprot.writeFieldBegin(TWITTER_ID_FIELD_DESC);
          oprot.writeString(this.twitterId);
          oprot.writeFieldEnd();
        }
      }
      if (this.groupName != null) {
        if (isSetGroupName()) {
          oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
          oprot.writeString(this.groupName);
          oprot.writeFieldEnd();
        }
      }
      if (this.recognitionLanguage != null) {
        if (isSetRecognitionLanguage()) {
          oprot.writeFieldBegin(RECOGNITION_LANGUAGE_FIELD_DESC);
          oprot.writeString(this.recognitionLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (isSetCustomerProfileId()) {
        oprot.writeFieldBegin(CUSTOMER_PROFILE_ID_FIELD_DESC);
        oprot.writeI64(this.customerProfileId);
        oprot.writeFieldEnd();
      }
      if (this.referralProof != null) {
        if (isSetReferralProof()) {
          oprot.writeFieldBegin(REFERRAL_PROOF_FIELD_DESC);
          oprot.writeString(this.referralProof);
          oprot.writeFieldEnd();
        }
      }
      if (isSetEducationalDiscount()) {
        oprot.writeFieldBegin(EDUCATIONAL_DISCOUNT_FIELD_DESC);
        oprot.writeBool(this.educationalDiscount);
        oprot.writeFieldEnd();
      }
      if (this.businessAddress != null) {
        if (isSetBusinessAddress()) {
          oprot.writeFieldBegin(BUSINESS_ADDRESS_FIELD_DESC);
          oprot.writeString(this.businessAddress);
          oprot.writeFieldEnd();
        }
      }
      if (isSetHideSponsorBilling()) {
        oprot.writeFieldBegin(HIDE_SPONSOR_BILLING_FIELD_DESC);
        oprot.writeBool(this.hideSponsorBilling);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("UserAttributes(");
      var first:Boolean = true;

      if (isSetDefaultLocationName()) {
        ret += "defaultLocationName:";
        if (this.defaultLocationName == null) {
          ret += "null";
        } else {
          ret += this.defaultLocationName;
        }
        first = false;
      }
      if (isSetDefaultLatitude()) {
        if (!first) ret +=  ", ";
        ret += "defaultLatitude:";
        ret += this.defaultLatitude;
        first = false;
      }
      if (isSetDefaultLongitude()) {
        if (!first) ret +=  ", ";
        ret += "defaultLongitude:";
        ret += this.defaultLongitude;
        first = false;
      }
      if (isSetPreactivation()) {
        if (!first) ret +=  ", ";
        ret += "preactivation:";
        ret += this.preactivation;
        first = false;
      }
      if (isSetViewedPromotions()) {
        if (!first) ret +=  ", ";
        ret += "viewedPromotions:";
        if (this.viewedPromotions == null) {
          ret += "null";
        } else {
          ret += this.viewedPromotions;
        }
        first = false;
      }
      if (isSetIncomingEmailAddress()) {
        if (!first) ret +=  ", ";
        ret += "incomingEmailAddress:";
        if (this.incomingEmailAddress == null) {
          ret += "null";
        } else {
          ret += this.incomingEmailAddress;
        }
        first = false;
      }
      if (isSetRecentMailedAddresses()) {
        if (!first) ret +=  ", ";
        ret += "recentMailedAddresses:";
        if (this.recentMailedAddresses == null) {
          ret += "null";
        } else {
          ret += this.recentMailedAddresses;
        }
        first = false;
      }
      if (isSetComments()) {
        if (!first) ret +=  ", ";
        ret += "comments:";
        if (this.comments == null) {
          ret += "null";
        } else {
          ret += this.comments;
        }
        first = false;
      }
      if (isSetDateAgreedToTermsOfService()) {
        if (!first) ret +=  ", ";
        ret += "dateAgreedToTermsOfService:";
        ret += this.dateAgreedToTermsOfService;
        first = false;
      }
      if (isSetMaxReferrals()) {
        if (!first) ret +=  ", ";
        ret += "maxReferrals:";
        ret += this.maxReferrals;
        first = false;
      }
      if (isSetReferralCount()) {
        if (!first) ret +=  ", ";
        ret += "referralCount:";
        ret += this.referralCount;
        first = false;
      }
      if (isSetRefererCode()) {
        if (!first) ret +=  ", ";
        ret += "refererCode:";
        if (this.refererCode == null) {
          ret += "null";
        } else {
          ret += this.refererCode;
        }
        first = false;
      }
      if (isSetSentEmailDate()) {
        if (!first) ret +=  ", ";
        ret += "sentEmailDate:";
        ret += this.sentEmailDate;
        first = false;
      }
      if (isSetSentEmailCount()) {
        if (!first) ret +=  ", ";
        ret += "sentEmailCount:";
        ret += this.sentEmailCount;
        first = false;
      }
      if (isSetDailyEmailLimit()) {
        if (!first) ret +=  ", ";
        ret += "dailyEmailLimit:";
        ret += this.dailyEmailLimit;
        first = false;
      }
      if (isSetEmailOptOutDate()) {
        if (!first) ret +=  ", ";
        ret += "emailOptOutDate:";
        ret += this.emailOptOutDate;
        first = false;
      }
      if (isSetPartnerEmailOptInDate()) {
        if (!first) ret +=  ", ";
        ret += "partnerEmailOptInDate:";
        ret += this.partnerEmailOptInDate;
        first = false;
      }
      if (isSetPreferredLanguage()) {
        if (!first) ret +=  ", ";
        ret += "preferredLanguage:";
        if (this.preferredLanguage == null) {
          ret += "null";
        } else {
          ret += this.preferredLanguage;
        }
        first = false;
      }
      if (isSetPreferredCountry()) {
        if (!first) ret +=  ", ";
        ret += "preferredCountry:";
        if (this.preferredCountry == null) {
          ret += "null";
        } else {
          ret += this.preferredCountry;
        }
        first = false;
      }
      if (isSetClipFullPage()) {
        if (!first) ret +=  ", ";
        ret += "clipFullPage:";
        ret += this.clipFullPage;
        first = false;
      }
      if (isSetTwitterUserName()) {
        if (!first) ret +=  ", ";
        ret += "twitterUserName:";
        if (this.twitterUserName == null) {
          ret += "null";
        } else {
          ret += this.twitterUserName;
        }
        first = false;
      }
      if (isSetTwitterId()) {
        if (!first) ret +=  ", ";
        ret += "twitterId:";
        if (this.twitterId == null) {
          ret += "null";
        } else {
          ret += this.twitterId;
        }
        first = false;
      }
      if (isSetGroupName()) {
        if (!first) ret +=  ", ";
        ret += "groupName:";
        if (this.groupName == null) {
          ret += "null";
        } else {
          ret += this.groupName;
        }
        first = false;
      }
      if (isSetRecognitionLanguage()) {
        if (!first) ret +=  ", ";
        ret += "recognitionLanguage:";
        if (this.recognitionLanguage == null) {
          ret += "null";
        } else {
          ret += this.recognitionLanguage;
        }
        first = false;
      }
      if (isSetCustomerProfileId()) {
        if (!first) ret +=  ", ";
        ret += "customerProfileId:";
        ret += this.customerProfileId;
        first = false;
      }
      if (isSetReferralProof()) {
        if (!first) ret +=  ", ";
        ret += "referralProof:";
        if (this.referralProof == null) {
          ret += "null";
        } else {
          ret += this.referralProof;
        }
        first = false;
      }
      if (isSetEducationalDiscount()) {
        if (!first) ret +=  ", ";
        ret += "educationalDiscount:";
        ret += this.educationalDiscount;
        first = false;
      }
      if (isSetBusinessAddress()) {
        if (!first) ret +=  ", ";
        ret += "businessAddress:";
        if (this.businessAddress == null) {
          ret += "null";
        } else {
          ret += this.businessAddress;
        }
        first = false;
      }
      if (isSetHideSponsorBilling()) {
        if (!first) ret +=  ", ";
        ret += "hideSponsorBilling:";
        ret += this.hideSponsorBilling;
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
