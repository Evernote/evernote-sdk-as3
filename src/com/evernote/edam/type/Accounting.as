/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.PremiumOrderStatus;

  /**
   *  This represents the bookkeeping information for the user's subscription.
   * 
   * <dl>
   *  <dt>uploadLimit</dt>
   *    <dd>The number of bytes that can be uploaded to the account
   *    in the current month.  For new notes that are created, this is the length
   *    of the note content (in Unicode characters) plus the size of each resource
   *    (in bytes).  For edited notes, this is the the difference between the old
   *    length and the new length (if this is greater than 0) plus the size of
   *    each new resource.
   *    </dd>
   *  <dt>uploadLimitEnd</dt>
   *    <dd>The date and time when the current upload limit
   *    expires.  At this time, the monthly upload count reverts to 0 and a new
   *    limit is imposed.  This date and time is exclusive, so this is effectively
   *    the start of the new month.
   *    </dd>
   *  <dt>uploadLimitNextMonth</dt>
   *    <dd> When uploadLimitEnd is reached, the service
   *    will change uploadLimit to uploadLimitNextMonth. If a premium account is
   *    canceled, this mechanism will reset the quota appropriately.
   *    </dd>
   *  <dt>premiumServiceStatus</dt>
   *    <dd>Indicates the phases of a premium account
   *    during the billing process.
   *    </dd>
   *  <dt>premiumOrderNumber</dt>
   *    <dd>The order number used by the commerce system to
   *    process recurring payments
   *    </dd>
   *  <dt>premiumServiceStart</dt>
   *    <dd>The start date when this premium promotion
   *    began (this number will get overwritten if a premium service is canceled
   *    and then re-activated).
   *    </dd>
   *  <dt>premiumCommerceService</dt>
   *    <dd>The commerce system used (paypal, Google
   *    checkout, etc)
   *    </dd>
   *  <dt>premiumServiceSKU</dt>
   *    <dd>The code associated with the purchase eg. monthly
   *    or annual purchase. Clients should interpret this value and localize it.
   *    </dd>
   *  <dt>lastSuccessfulCharge</dt>
   *    <dd>Date the last time the user was charged.
   *    Null if never charged.
   *    </dd>
   *  <dt>lastFailedCharge</dt>
   *    <dd>Date the last time a charge was attempted and
   *    failed.
   *    </dd>
   *  <dt>lastFailedChargeReason</dt>
   *    <dd>Reason provided for the charge failure
   *    </dd>
   *  <dt>nextPaymentDue</dt>
   *    <dd>The end of the billing cycle. This could be in the
   *    past if there are failed charges.
   *    </dd>
   *  <dt>premiumLockUntil</dt>
   *    <dd>An internal variable to manage locking operations
   *    on the commerce variables.
   *    </dd>
   *  <dt>updated</dt>
   *    <dd>The date any modification where made to this record.
   *    </dd>
   *  <dt>premiumSubscriptionNumber</dt>
   *    <dd>The number number identifying the
   *    recurring subscription used to make the recurring charges.
   *    </dd>
   *  <dt>lastRequestedCharge</dt>
   *    <dd>Date charge last attempted</dd>
   *  <dt>currency</dt>
   *    <dd>ISO 4217 currency code</dd>
   *  <dt>unitPrice</dt>
   *    <dd>charge in the smallest unit of the currency (e.g. cents for USD)</dd>
   *  </dl>
   */
  public class Accounting implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("Accounting");
    private static const UPLOAD_LIMIT_FIELD_DESC:TField = new TField("uploadLimit", TType.I64, 1);
    private static const UPLOAD_LIMIT_END_FIELD_DESC:TField = new TField("uploadLimitEnd", TType.I64, 2);
    private static const UPLOAD_LIMIT_NEXT_MONTH_FIELD_DESC:TField = new TField("uploadLimitNextMonth", TType.I64, 3);
    private static const PREMIUM_SERVICE_STATUS_FIELD_DESC:TField = new TField("premiumServiceStatus", TType.I32, 4);
    private static const PREMIUM_ORDER_NUMBER_FIELD_DESC:TField = new TField("premiumOrderNumber", TType.STRING, 5);
    private static const PREMIUM_COMMERCE_SERVICE_FIELD_DESC:TField = new TField("premiumCommerceService", TType.STRING, 6);
    private static const PREMIUM_SERVICE_START_FIELD_DESC:TField = new TField("premiumServiceStart", TType.I64, 7);
    private static const PREMIUM_SERVICE_SKU_FIELD_DESC:TField = new TField("premiumServiceSKU", TType.STRING, 8);
    private static const LAST_SUCCESSFUL_CHARGE_FIELD_DESC:TField = new TField("lastSuccessfulCharge", TType.I64, 9);
    private static const LAST_FAILED_CHARGE_FIELD_DESC:TField = new TField("lastFailedCharge", TType.I64, 10);
    private static const LAST_FAILED_CHARGE_REASON_FIELD_DESC:TField = new TField("lastFailedChargeReason", TType.STRING, 11);
    private static const NEXT_PAYMENT_DUE_FIELD_DESC:TField = new TField("nextPaymentDue", TType.I64, 12);
    private static const PREMIUM_LOCK_UNTIL_FIELD_DESC:TField = new TField("premiumLockUntil", TType.I64, 13);
    private static const UPDATED_FIELD_DESC:TField = new TField("updated", TType.I64, 14);
    private static const PREMIUM_SUBSCRIPTION_NUMBER_FIELD_DESC:TField = new TField("premiumSubscriptionNumber", TType.STRING, 16);
    private static const LAST_REQUESTED_CHARGE_FIELD_DESC:TField = new TField("lastRequestedCharge", TType.I64, 17);
    private static const CURRENCY_FIELD_DESC:TField = new TField("currency", TType.STRING, 18);
    private static const UNIT_PRICE_FIELD_DESC:TField = new TField("unitPrice", TType.I32, 19);

    private var _uploadLimit:BigInteger;
    public static const UPLOADLIMIT:int = 1;
    private var _uploadLimitEnd:BigInteger;
    public static const UPLOADLIMITEND:int = 2;
    private var _uploadLimitNextMonth:BigInteger;
    public static const UPLOADLIMITNEXTMONTH:int = 3;
    private var _premiumServiceStatus:int;
    public static const PREMIUMSERVICESTATUS:int = 4;
    private var _premiumOrderNumber:String;
    public static const PREMIUMORDERNUMBER:int = 5;
    private var _premiumCommerceService:String;
    public static const PREMIUMCOMMERCESERVICE:int = 6;
    private var _premiumServiceStart:BigInteger;
    public static const PREMIUMSERVICESTART:int = 7;
    private var _premiumServiceSKU:String;
    public static const PREMIUMSERVICESKU:int = 8;
    private var _lastSuccessfulCharge:BigInteger;
    public static const LASTSUCCESSFULCHARGE:int = 9;
    private var _lastFailedCharge:BigInteger;
    public static const LASTFAILEDCHARGE:int = 10;
    private var _lastFailedChargeReason:String;
    public static const LASTFAILEDCHARGEREASON:int = 11;
    private var _nextPaymentDue:BigInteger;
    public static const NEXTPAYMENTDUE:int = 12;
    private var _premiumLockUntil:BigInteger;
    public static const PREMIUMLOCKUNTIL:int = 13;
    private var _updated:BigInteger;
    public static const UPDATED:int = 14;
    private var _premiumSubscriptionNumber:String;
    public static const PREMIUMSUBSCRIPTIONNUMBER:int = 16;
    private var _lastRequestedCharge:BigInteger;
    public static const LASTREQUESTEDCHARGE:int = 17;
    private var _currency:String;
    public static const CURRENCY:int = 18;
    private var _unitPrice:int;
    public static const UNITPRICE:int = 19;

    private var __isset_uploadLimit:Boolean = false;
    private var __isset_uploadLimitEnd:Boolean = false;
    private var __isset_uploadLimitNextMonth:Boolean = false;
    private var __isset_premiumServiceStatus:Boolean = false;
    private var __isset_premiumServiceStart:Boolean = false;
    private var __isset_lastSuccessfulCharge:Boolean = false;
    private var __isset_lastFailedCharge:Boolean = false;
    private var __isset_nextPaymentDue:Boolean = false;
    private var __isset_premiumLockUntil:Boolean = false;
    private var __isset_updated:Boolean = false;
    private var __isset_lastRequestedCharge:Boolean = false;
    private var __isset_unitPrice:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[UPLOADLIMIT] = new FieldMetaData("uploadLimit", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[UPLOADLIMITEND] = new FieldMetaData("uploadLimitEnd", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[UPLOADLIMITNEXTMONTH] = new FieldMetaData("uploadLimitNextMonth", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[PREMIUMSERVICESTATUS] = new FieldMetaData("premiumServiceStatus", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[PREMIUMORDERNUMBER] = new FieldMetaData("premiumOrderNumber", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PREMIUMCOMMERCESERVICE] = new FieldMetaData("premiumCommerceService", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PREMIUMSERVICESTART] = new FieldMetaData("premiumServiceStart", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[PREMIUMSERVICESKU] = new FieldMetaData("premiumServiceSKU", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[LASTSUCCESSFULCHARGE] = new FieldMetaData("lastSuccessfulCharge", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[LASTFAILEDCHARGE] = new FieldMetaData("lastFailedCharge", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[LASTFAILEDCHARGEREASON] = new FieldMetaData("lastFailedChargeReason", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[NEXTPAYMENTDUE] = new FieldMetaData("nextPaymentDue", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[PREMIUMLOCKUNTIL] = new FieldMetaData("premiumLockUntil", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[UPDATED] = new FieldMetaData("updated", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[PREMIUMSUBSCRIPTIONNUMBER] = new FieldMetaData("premiumSubscriptionNumber", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[LASTREQUESTEDCHARGE] = new FieldMetaData("lastRequestedCharge", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[CURRENCY] = new FieldMetaData("currency", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[UNITPRICE] = new FieldMetaData("unitPrice", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(Accounting, metaDataMap);
    }

    public function Accounting() {
    }

    public function get uploadLimit():BigInteger {
      return this._uploadLimit;
    }

    public function set uploadLimit(uploadLimit:BigInteger):void {
      this._uploadLimit = uploadLimit;
      this.__isset_uploadLimit = true;
    }

    public function unsetUploadLimit():void {
      this.__isset_uploadLimit = false;
    }

    // Returns true if field uploadLimit is set (has been assigned a value) and false otherwise
    public function isSetUploadLimit():Boolean {
      return this.__isset_uploadLimit;
    }

    public function get uploadLimitEnd():BigInteger {
      return this._uploadLimitEnd;
    }

    public function set uploadLimitEnd(uploadLimitEnd:BigInteger):void {
      this._uploadLimitEnd = uploadLimitEnd;
      this.__isset_uploadLimitEnd = true;
    }

    public function unsetUploadLimitEnd():void {
      this.__isset_uploadLimitEnd = false;
    }

    // Returns true if field uploadLimitEnd is set (has been assigned a value) and false otherwise
    public function isSetUploadLimitEnd():Boolean {
      return this.__isset_uploadLimitEnd;
    }

    public function get uploadLimitNextMonth():BigInteger {
      return this._uploadLimitNextMonth;
    }

    public function set uploadLimitNextMonth(uploadLimitNextMonth:BigInteger):void {
      this._uploadLimitNextMonth = uploadLimitNextMonth;
      this.__isset_uploadLimitNextMonth = true;
    }

    public function unsetUploadLimitNextMonth():void {
      this.__isset_uploadLimitNextMonth = false;
    }

    // Returns true if field uploadLimitNextMonth is set (has been assigned a value) and false otherwise
    public function isSetUploadLimitNextMonth():Boolean {
      return this.__isset_uploadLimitNextMonth;
    }

    public function get premiumServiceStatus():int {
      return this._premiumServiceStatus;
    }

    public function set premiumServiceStatus(premiumServiceStatus:int):void {
      this._premiumServiceStatus = premiumServiceStatus;
      this.__isset_premiumServiceStatus = true;
    }

    public function unsetPremiumServiceStatus():void {
      this.__isset_premiumServiceStatus = false;
    }

    // Returns true if field premiumServiceStatus is set (has been assigned a value) and false otherwise
    public function isSetPremiumServiceStatus():Boolean {
      return this.__isset_premiumServiceStatus;
    }

    public function get premiumOrderNumber():String {
      return this._premiumOrderNumber;
    }

    public function set premiumOrderNumber(premiumOrderNumber:String):void {
      this._premiumOrderNumber = premiumOrderNumber;
    }

    public function unsetPremiumOrderNumber():void {
      this.premiumOrderNumber = null;
    }

    // Returns true if field premiumOrderNumber is set (has been assigned a value) and false otherwise
    public function isSetPremiumOrderNumber():Boolean {
      return this.premiumOrderNumber != null;
    }

    public function get premiumCommerceService():String {
      return this._premiumCommerceService;
    }

    public function set premiumCommerceService(premiumCommerceService:String):void {
      this._premiumCommerceService = premiumCommerceService;
    }

    public function unsetPremiumCommerceService():void {
      this.premiumCommerceService = null;
    }

    // Returns true if field premiumCommerceService is set (has been assigned a value) and false otherwise
    public function isSetPremiumCommerceService():Boolean {
      return this.premiumCommerceService != null;
    }

    public function get premiumServiceStart():BigInteger {
      return this._premiumServiceStart;
    }

    public function set premiumServiceStart(premiumServiceStart:BigInteger):void {
      this._premiumServiceStart = premiumServiceStart;
      this.__isset_premiumServiceStart = true;
    }

    public function unsetPremiumServiceStart():void {
      this.__isset_premiumServiceStart = false;
    }

    // Returns true if field premiumServiceStart is set (has been assigned a value) and false otherwise
    public function isSetPremiumServiceStart():Boolean {
      return this.__isset_premiumServiceStart;
    }

    public function get premiumServiceSKU():String {
      return this._premiumServiceSKU;
    }

    public function set premiumServiceSKU(premiumServiceSKU:String):void {
      this._premiumServiceSKU = premiumServiceSKU;
    }

    public function unsetPremiumServiceSKU():void {
      this.premiumServiceSKU = null;
    }

    // Returns true if field premiumServiceSKU is set (has been assigned a value) and false otherwise
    public function isSetPremiumServiceSKU():Boolean {
      return this.premiumServiceSKU != null;
    }

    public function get lastSuccessfulCharge():BigInteger {
      return this._lastSuccessfulCharge;
    }

    public function set lastSuccessfulCharge(lastSuccessfulCharge:BigInteger):void {
      this._lastSuccessfulCharge = lastSuccessfulCharge;
      this.__isset_lastSuccessfulCharge = true;
    }

    public function unsetLastSuccessfulCharge():void {
      this.__isset_lastSuccessfulCharge = false;
    }

    // Returns true if field lastSuccessfulCharge is set (has been assigned a value) and false otherwise
    public function isSetLastSuccessfulCharge():Boolean {
      return this.__isset_lastSuccessfulCharge;
    }

    public function get lastFailedCharge():BigInteger {
      return this._lastFailedCharge;
    }

    public function set lastFailedCharge(lastFailedCharge:BigInteger):void {
      this._lastFailedCharge = lastFailedCharge;
      this.__isset_lastFailedCharge = true;
    }

    public function unsetLastFailedCharge():void {
      this.__isset_lastFailedCharge = false;
    }

    // Returns true if field lastFailedCharge is set (has been assigned a value) and false otherwise
    public function isSetLastFailedCharge():Boolean {
      return this.__isset_lastFailedCharge;
    }

    public function get lastFailedChargeReason():String {
      return this._lastFailedChargeReason;
    }

    public function set lastFailedChargeReason(lastFailedChargeReason:String):void {
      this._lastFailedChargeReason = lastFailedChargeReason;
    }

    public function unsetLastFailedChargeReason():void {
      this.lastFailedChargeReason = null;
    }

    // Returns true if field lastFailedChargeReason is set (has been assigned a value) and false otherwise
    public function isSetLastFailedChargeReason():Boolean {
      return this.lastFailedChargeReason != null;
    }

    public function get nextPaymentDue():BigInteger {
      return this._nextPaymentDue;
    }

    public function set nextPaymentDue(nextPaymentDue:BigInteger):void {
      this._nextPaymentDue = nextPaymentDue;
      this.__isset_nextPaymentDue = true;
    }

    public function unsetNextPaymentDue():void {
      this.__isset_nextPaymentDue = false;
    }

    // Returns true if field nextPaymentDue is set (has been assigned a value) and false otherwise
    public function isSetNextPaymentDue():Boolean {
      return this.__isset_nextPaymentDue;
    }

    public function get premiumLockUntil():BigInteger {
      return this._premiumLockUntil;
    }

    public function set premiumLockUntil(premiumLockUntil:BigInteger):void {
      this._premiumLockUntil = premiumLockUntil;
      this.__isset_premiumLockUntil = true;
    }

    public function unsetPremiumLockUntil():void {
      this.__isset_premiumLockUntil = false;
    }

    // Returns true if field premiumLockUntil is set (has been assigned a value) and false otherwise
    public function isSetPremiumLockUntil():Boolean {
      return this.__isset_premiumLockUntil;
    }

    public function get updated():BigInteger {
      return this._updated;
    }

    public function set updated(updated:BigInteger):void {
      this._updated = updated;
      this.__isset_updated = true;
    }

    public function unsetUpdated():void {
      this.__isset_updated = false;
    }

    // Returns true if field updated is set (has been assigned a value) and false otherwise
    public function isSetUpdated():Boolean {
      return this.__isset_updated;
    }

    public function get premiumSubscriptionNumber():String {
      return this._premiumSubscriptionNumber;
    }

    public function set premiumSubscriptionNumber(premiumSubscriptionNumber:String):void {
      this._premiumSubscriptionNumber = premiumSubscriptionNumber;
    }

    public function unsetPremiumSubscriptionNumber():void {
      this.premiumSubscriptionNumber = null;
    }

    // Returns true if field premiumSubscriptionNumber is set (has been assigned a value) and false otherwise
    public function isSetPremiumSubscriptionNumber():Boolean {
      return this.premiumSubscriptionNumber != null;
    }

    public function get lastRequestedCharge():BigInteger {
      return this._lastRequestedCharge;
    }

    public function set lastRequestedCharge(lastRequestedCharge:BigInteger):void {
      this._lastRequestedCharge = lastRequestedCharge;
      this.__isset_lastRequestedCharge = true;
    }

    public function unsetLastRequestedCharge():void {
      this.__isset_lastRequestedCharge = false;
    }

    // Returns true if field lastRequestedCharge is set (has been assigned a value) and false otherwise
    public function isSetLastRequestedCharge():Boolean {
      return this.__isset_lastRequestedCharge;
    }

    public function get currency():String {
      return this._currency;
    }

    public function set currency(currency:String):void {
      this._currency = currency;
    }

    public function unsetCurrency():void {
      this.currency = null;
    }

    // Returns true if field currency is set (has been assigned a value) and false otherwise
    public function isSetCurrency():Boolean {
      return this.currency != null;
    }

    public function get unitPrice():int {
      return this._unitPrice;
    }

    public function set unitPrice(unitPrice:int):void {
      this._unitPrice = unitPrice;
      this.__isset_unitPrice = true;
    }

    public function unsetUnitPrice():void {
      this.__isset_unitPrice = false;
    }

    // Returns true if field unitPrice is set (has been assigned a value) and false otherwise
    public function isSetUnitPrice():Boolean {
      return this.__isset_unitPrice;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case UPLOADLIMIT:
        if (value == null) {
          unsetUploadLimit();
        } else {
          this.uploadLimit = value;
        }
        break;

      case UPLOADLIMITEND:
        if (value == null) {
          unsetUploadLimitEnd();
        } else {
          this.uploadLimitEnd = value;
        }
        break;

      case UPLOADLIMITNEXTMONTH:
        if (value == null) {
          unsetUploadLimitNextMonth();
        } else {
          this.uploadLimitNextMonth = value;
        }
        break;

      case PREMIUMSERVICESTATUS:
        if (value == null) {
          unsetPremiumServiceStatus();
        } else {
          this.premiumServiceStatus = value;
        }
        break;

      case PREMIUMORDERNUMBER:
        if (value == null) {
          unsetPremiumOrderNumber();
        } else {
          this.premiumOrderNumber = value;
        }
        break;

      case PREMIUMCOMMERCESERVICE:
        if (value == null) {
          unsetPremiumCommerceService();
        } else {
          this.premiumCommerceService = value;
        }
        break;

      case PREMIUMSERVICESTART:
        if (value == null) {
          unsetPremiumServiceStart();
        } else {
          this.premiumServiceStart = value;
        }
        break;

      case PREMIUMSERVICESKU:
        if (value == null) {
          unsetPremiumServiceSKU();
        } else {
          this.premiumServiceSKU = value;
        }
        break;

      case LASTSUCCESSFULCHARGE:
        if (value == null) {
          unsetLastSuccessfulCharge();
        } else {
          this.lastSuccessfulCharge = value;
        }
        break;

      case LASTFAILEDCHARGE:
        if (value == null) {
          unsetLastFailedCharge();
        } else {
          this.lastFailedCharge = value;
        }
        break;

      case LASTFAILEDCHARGEREASON:
        if (value == null) {
          unsetLastFailedChargeReason();
        } else {
          this.lastFailedChargeReason = value;
        }
        break;

      case NEXTPAYMENTDUE:
        if (value == null) {
          unsetNextPaymentDue();
        } else {
          this.nextPaymentDue = value;
        }
        break;

      case PREMIUMLOCKUNTIL:
        if (value == null) {
          unsetPremiumLockUntil();
        } else {
          this.premiumLockUntil = value;
        }
        break;

      case UPDATED:
        if (value == null) {
          unsetUpdated();
        } else {
          this.updated = value;
        }
        break;

      case PREMIUMSUBSCRIPTIONNUMBER:
        if (value == null) {
          unsetPremiumSubscriptionNumber();
        } else {
          this.premiumSubscriptionNumber = value;
        }
        break;

      case LASTREQUESTEDCHARGE:
        if (value == null) {
          unsetLastRequestedCharge();
        } else {
          this.lastRequestedCharge = value;
        }
        break;

      case CURRENCY:
        if (value == null) {
          unsetCurrency();
        } else {
          this.currency = value;
        }
        break;

      case UNITPRICE:
        if (value == null) {
          unsetUnitPrice();
        } else {
          this.unitPrice = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case UPLOADLIMIT:
        return this.uploadLimit;
      case UPLOADLIMITEND:
        return this.uploadLimitEnd;
      case UPLOADLIMITNEXTMONTH:
        return this.uploadLimitNextMonth;
      case PREMIUMSERVICESTATUS:
        return this.premiumServiceStatus;
      case PREMIUMORDERNUMBER:
        return this.premiumOrderNumber;
      case PREMIUMCOMMERCESERVICE:
        return this.premiumCommerceService;
      case PREMIUMSERVICESTART:
        return this.premiumServiceStart;
      case PREMIUMSERVICESKU:
        return this.premiumServiceSKU;
      case LASTSUCCESSFULCHARGE:
        return this.lastSuccessfulCharge;
      case LASTFAILEDCHARGE:
        return this.lastFailedCharge;
      case LASTFAILEDCHARGEREASON:
        return this.lastFailedChargeReason;
      case NEXTPAYMENTDUE:
        return this.nextPaymentDue;
      case PREMIUMLOCKUNTIL:
        return this.premiumLockUntil;
      case UPDATED:
        return this.updated;
      case PREMIUMSUBSCRIPTIONNUMBER:
        return this.premiumSubscriptionNumber;
      case LASTREQUESTEDCHARGE:
        return this.lastRequestedCharge;
      case CURRENCY:
        return this.currency;
      case UNITPRICE:
        return this.unitPrice;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case UPLOADLIMIT:
        return isSetUploadLimit();
      case UPLOADLIMITEND:
        return isSetUploadLimitEnd();
      case UPLOADLIMITNEXTMONTH:
        return isSetUploadLimitNextMonth();
      case PREMIUMSERVICESTATUS:
        return isSetPremiumServiceStatus();
      case PREMIUMORDERNUMBER:
        return isSetPremiumOrderNumber();
      case PREMIUMCOMMERCESERVICE:
        return isSetPremiumCommerceService();
      case PREMIUMSERVICESTART:
        return isSetPremiumServiceStart();
      case PREMIUMSERVICESKU:
        return isSetPremiumServiceSKU();
      case LASTSUCCESSFULCHARGE:
        return isSetLastSuccessfulCharge();
      case LASTFAILEDCHARGE:
        return isSetLastFailedCharge();
      case LASTFAILEDCHARGEREASON:
        return isSetLastFailedChargeReason();
      case NEXTPAYMENTDUE:
        return isSetNextPaymentDue();
      case PREMIUMLOCKUNTIL:
        return isSetPremiumLockUntil();
      case UPDATED:
        return isSetUpdated();
      case PREMIUMSUBSCRIPTIONNUMBER:
        return isSetPremiumSubscriptionNumber();
      case LASTREQUESTEDCHARGE:
        return isSetLastRequestedCharge();
      case CURRENCY:
        return isSetCurrency();
      case UNITPRICE:
        return isSetUnitPrice();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case UPLOADLIMIT:
            if (field.type == TType.I64) {
              this.uploadLimit = iprot.readI64();
              this.__isset_uploadLimit = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPLOADLIMITEND:
            if (field.type == TType.I64) {
              this.uploadLimitEnd = iprot.readI64();
              this.__isset_uploadLimitEnd = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPLOADLIMITNEXTMONTH:
            if (field.type == TType.I64) {
              this.uploadLimitNextMonth = iprot.readI64();
              this.__isset_uploadLimitNextMonth = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREMIUMSERVICESTATUS:
            if (field.type == TType.I32) {
              this.premiumServiceStatus = iprot.readI32();
              this.__isset_premiumServiceStatus = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREMIUMORDERNUMBER:
            if (field.type == TType.STRING) {
              this.premiumOrderNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREMIUMCOMMERCESERVICE:
            if (field.type == TType.STRING) {
              this.premiumCommerceService = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREMIUMSERVICESTART:
            if (field.type == TType.I64) {
              this.premiumServiceStart = iprot.readI64();
              this.__isset_premiumServiceStart = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREMIUMSERVICESKU:
            if (field.type == TType.STRING) {
              this.premiumServiceSKU = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LASTSUCCESSFULCHARGE:
            if (field.type == TType.I64) {
              this.lastSuccessfulCharge = iprot.readI64();
              this.__isset_lastSuccessfulCharge = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LASTFAILEDCHARGE:
            if (field.type == TType.I64) {
              this.lastFailedCharge = iprot.readI64();
              this.__isset_lastFailedCharge = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LASTFAILEDCHARGEREASON:
            if (field.type == TType.STRING) {
              this.lastFailedChargeReason = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEXTPAYMENTDUE:
            if (field.type == TType.I64) {
              this.nextPaymentDue = iprot.readI64();
              this.__isset_nextPaymentDue = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREMIUMLOCKUNTIL:
            if (field.type == TType.I64) {
              this.premiumLockUntil = iprot.readI64();
              this.__isset_premiumLockUntil = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATED:
            if (field.type == TType.I64) {
              this.updated = iprot.readI64();
              this.__isset_updated = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PREMIUMSUBSCRIPTIONNUMBER:
            if (field.type == TType.STRING) {
              this.premiumSubscriptionNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LASTREQUESTEDCHARGE:
            if (field.type == TType.I64) {
              this.lastRequestedCharge = iprot.readI64();
              this.__isset_lastRequestedCharge = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CURRENCY:
            if (field.type == TType.STRING) {
              this.currency = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UNITPRICE:
            if (field.type == TType.I32) {
              this.unitPrice = iprot.readI32();
              this.__isset_unitPrice = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (isSetUploadLimit()) {
        oprot.writeFieldBegin(UPLOAD_LIMIT_FIELD_DESC);
        oprot.writeI64(this.uploadLimit);
        oprot.writeFieldEnd();
      }
      if (isSetUploadLimitEnd()) {
        oprot.writeFieldBegin(UPLOAD_LIMIT_END_FIELD_DESC);
        oprot.writeI64(this.uploadLimitEnd);
        oprot.writeFieldEnd();
      }
      if (isSetUploadLimitNextMonth()) {
        oprot.writeFieldBegin(UPLOAD_LIMIT_NEXT_MONTH_FIELD_DESC);
        oprot.writeI64(this.uploadLimitNextMonth);
        oprot.writeFieldEnd();
      }
      if (isSetPremiumServiceStatus()) {
        oprot.writeFieldBegin(PREMIUM_SERVICE_STATUS_FIELD_DESC);
        oprot.writeI32(this.premiumServiceStatus);
        oprot.writeFieldEnd();
      }
      if (this.premiumOrderNumber != null) {
        if (isSetPremiumOrderNumber()) {
          oprot.writeFieldBegin(PREMIUM_ORDER_NUMBER_FIELD_DESC);
          oprot.writeString(this.premiumOrderNumber);
          oprot.writeFieldEnd();
        }
      }
      if (this.premiumCommerceService != null) {
        if (isSetPremiumCommerceService()) {
          oprot.writeFieldBegin(PREMIUM_COMMERCE_SERVICE_FIELD_DESC);
          oprot.writeString(this.premiumCommerceService);
          oprot.writeFieldEnd();
        }
      }
      if (isSetPremiumServiceStart()) {
        oprot.writeFieldBegin(PREMIUM_SERVICE_START_FIELD_DESC);
        oprot.writeI64(this.premiumServiceStart);
        oprot.writeFieldEnd();
      }
      if (this.premiumServiceSKU != null) {
        if (isSetPremiumServiceSKU()) {
          oprot.writeFieldBegin(PREMIUM_SERVICE_SKU_FIELD_DESC);
          oprot.writeString(this.premiumServiceSKU);
          oprot.writeFieldEnd();
        }
      }
      if (isSetLastSuccessfulCharge()) {
        oprot.writeFieldBegin(LAST_SUCCESSFUL_CHARGE_FIELD_DESC);
        oprot.writeI64(this.lastSuccessfulCharge);
        oprot.writeFieldEnd();
      }
      if (isSetLastFailedCharge()) {
        oprot.writeFieldBegin(LAST_FAILED_CHARGE_FIELD_DESC);
        oprot.writeI64(this.lastFailedCharge);
        oprot.writeFieldEnd();
      }
      if (this.lastFailedChargeReason != null) {
        if (isSetLastFailedChargeReason()) {
          oprot.writeFieldBegin(LAST_FAILED_CHARGE_REASON_FIELD_DESC);
          oprot.writeString(this.lastFailedChargeReason);
          oprot.writeFieldEnd();
        }
      }
      if (isSetNextPaymentDue()) {
        oprot.writeFieldBegin(NEXT_PAYMENT_DUE_FIELD_DESC);
        oprot.writeI64(this.nextPaymentDue);
        oprot.writeFieldEnd();
      }
      if (isSetPremiumLockUntil()) {
        oprot.writeFieldBegin(PREMIUM_LOCK_UNTIL_FIELD_DESC);
        oprot.writeI64(this.premiumLockUntil);
        oprot.writeFieldEnd();
      }
      if (isSetUpdated()) {
        oprot.writeFieldBegin(UPDATED_FIELD_DESC);
        oprot.writeI64(this.updated);
        oprot.writeFieldEnd();
      }
      if (this.premiumSubscriptionNumber != null) {
        if (isSetPremiumSubscriptionNumber()) {
          oprot.writeFieldBegin(PREMIUM_SUBSCRIPTION_NUMBER_FIELD_DESC);
          oprot.writeString(this.premiumSubscriptionNumber);
          oprot.writeFieldEnd();
        }
      }
      if (isSetLastRequestedCharge()) {
        oprot.writeFieldBegin(LAST_REQUESTED_CHARGE_FIELD_DESC);
        oprot.writeI64(this.lastRequestedCharge);
        oprot.writeFieldEnd();
      }
      if (this.currency != null) {
        if (isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(this.currency);
          oprot.writeFieldEnd();
        }
      }
      if (isSetUnitPrice()) {
        oprot.writeFieldBegin(UNIT_PRICE_FIELD_DESC);
        oprot.writeI32(this.unitPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("Accounting(");
      var first:Boolean = true;

      if (isSetUploadLimit()) {
        ret += "uploadLimit:";
        ret += this.uploadLimit;
        first = false;
      }
      if (isSetUploadLimitEnd()) {
        if (!first) ret +=  ", ";
        ret += "uploadLimitEnd:";
        ret += this.uploadLimitEnd;
        first = false;
      }
      if (isSetUploadLimitNextMonth()) {
        if (!first) ret +=  ", ";
        ret += "uploadLimitNextMonth:";
        ret += this.uploadLimitNextMonth;
        first = false;
      }
      if (isSetPremiumServiceStatus()) {
        if (!first) ret +=  ", ";
        ret += "premiumServiceStatus:";
        var premiumServiceStatus_name:String = PremiumOrderStatus.VALUES_TO_NAMES[this.premiumServiceStatus];
        if (premiumServiceStatus_name != null) {
          ret += premiumServiceStatus_name;
          ret += " (";
        }
        ret += this.premiumServiceStatus;
        if (premiumServiceStatus_name != null) {
          ret += ")";
        }
        first = false;
      }
      if (isSetPremiumOrderNumber()) {
        if (!first) ret +=  ", ";
        ret += "premiumOrderNumber:";
        if (this.premiumOrderNumber == null) {
          ret += "null";
        } else {
          ret += this.premiumOrderNumber;
        }
        first = false;
      }
      if (isSetPremiumCommerceService()) {
        if (!first) ret +=  ", ";
        ret += "premiumCommerceService:";
        if (this.premiumCommerceService == null) {
          ret += "null";
        } else {
          ret += this.premiumCommerceService;
        }
        first = false;
      }
      if (isSetPremiumServiceStart()) {
        if (!first) ret +=  ", ";
        ret += "premiumServiceStart:";
        ret += this.premiumServiceStart;
        first = false;
      }
      if (isSetPremiumServiceSKU()) {
        if (!first) ret +=  ", ";
        ret += "premiumServiceSKU:";
        if (this.premiumServiceSKU == null) {
          ret += "null";
        } else {
          ret += this.premiumServiceSKU;
        }
        first = false;
      }
      if (isSetLastSuccessfulCharge()) {
        if (!first) ret +=  ", ";
        ret += "lastSuccessfulCharge:";
        ret += this.lastSuccessfulCharge;
        first = false;
      }
      if (isSetLastFailedCharge()) {
        if (!first) ret +=  ", ";
        ret += "lastFailedCharge:";
        ret += this.lastFailedCharge;
        first = false;
      }
      if (isSetLastFailedChargeReason()) {
        if (!first) ret +=  ", ";
        ret += "lastFailedChargeReason:";
        if (this.lastFailedChargeReason == null) {
          ret += "null";
        } else {
          ret += this.lastFailedChargeReason;
        }
        first = false;
      }
      if (isSetNextPaymentDue()) {
        if (!first) ret +=  ", ";
        ret += "nextPaymentDue:";
        ret += this.nextPaymentDue;
        first = false;
      }
      if (isSetPremiumLockUntil()) {
        if (!first) ret +=  ", ";
        ret += "premiumLockUntil:";
        ret += this.premiumLockUntil;
        first = false;
      }
      if (isSetUpdated()) {
        if (!first) ret +=  ", ";
        ret += "updated:";
        ret += this.updated;
        first = false;
      }
      if (isSetPremiumSubscriptionNumber()) {
        if (!first) ret +=  ", ";
        ret += "premiumSubscriptionNumber:";
        if (this.premiumSubscriptionNumber == null) {
          ret += "null";
        } else {
          ret += this.premiumSubscriptionNumber;
        }
        first = false;
      }
      if (isSetLastRequestedCharge()) {
        if (!first) ret +=  ", ";
        ret += "lastRequestedCharge:";
        ret += this.lastRequestedCharge;
        first = false;
      }
      if (isSetCurrency()) {
        if (!first) ret +=  ", ";
        ret += "currency:";
        if (this.currency == null) {
          ret += "null";
        } else {
          ret += this.currency;
        }
        first = false;
      }
      if (isSetUnitPrice()) {
        if (!first) ret +=  ", ";
        ret += "unitPrice:";
        ret += this.unitPrice;
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
      if (isSetPremiumServiceStatus() && !PremiumOrderStatus.VALID_VALUES.contains(premiumServiceStatus)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'premiumServiceStatus' has been assigned the invalid value " + premiumServiceStatus);
      }
    }

  }

}
