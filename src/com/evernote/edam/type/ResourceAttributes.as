/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.LazyMap;

  /**
   * Structure holding the optional attributes of a Resource
   * <dl>
   * <dt>sourceURL</dt>
   *   <dd>the original location where the resource was hosted
   *   <br/>
   *    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
   *   </dd>
   * 
   * <dt>timestamp</dt>
   *   <dd>the date and time that is associated with this resource
   *   (e.g. the time embedded in an image from a digital camera with a clock)
   *   </dd>
   * 
   * <dt>latitude</dt>
   *   <dd>the latitude where the resource was captured
   *   </dd>
   * 
   * <dt>longitude</dt>
   *   <dd>the longitude where the resource was captured
   *   </dd>
   * 
   * <dt>altitude</dt>
   *   <dd>the altitude where the resource was captured
   *   </dd>
   * 
   * <dt>cameraMake</dt>
   *   <dd>information about an image's camera, e.g. as embedded in
   *   the image's EXIF data
   *   <br/>
   *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
   *   </dd>
   * 
   * <dt>cameraModel</dt>
   *   <dd>information about an image's camera, e.g. as embedded
   *   in the image's EXIF data
   *   <br/>
   *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
   *   </dd>
   * 
   * <dt>clientWillIndex</dt>
   *   <dd>if true, then the original client that submitted
   *   the resource plans to submit the recognition index for this resource at a
   *   later time.
   *   </dd>
   * 
   * <dt>recoType</dt>
   *   <dd>DEPRECATED - this field is no longer set by the service, so should
   *     be ignored.
   *   </dd>
   * 
   * <dt>fileName</dt>
   *   <dd>if the resource came from a source that provided an
   *   explicit file name, the original name will be stored here.  Many resources
   *   come from unnamed sources, so this will not always be set.
   *   </dd>
   * 
   * <dt>attachment</dt>
   *   <dd>this will be true if the resource should be displayed as an attachment,
   *   or false if the resource should be displayed inline (if possible).
   *   </dd>
   * 
   * <dt>applicationData</dt>
   * <dd>Provides a location for applications to store a relatively small
   * (4kb) blob of data associated with a Resource that is not visible to the user
   * and that is opaque to the Evernote service. A single application may use at most
   * one entry in this map, using its API consumer key as the map key. See the
   * documentation for LazyMap for a description of when the actual map values
   * are returned by the service.
   * <p>To safely add or modify your application's entry in the map, use
   * NoteStore.setResourceApplicationDataEntry. To safely remove your application's
   * entry from the map, use NoteStore.unsetResourceApplicationDataEntry.</p>
   * Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
   * <br/>
   * Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
   * <br/>
   * Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
   * </dd>
   * 
   * </dl>
   */
  public class ResourceAttributes implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("ResourceAttributes");
    private static const SOURCE_URL_FIELD_DESC:TField = new TField("sourceURL", TType.STRING, 1);
    private static const TIMESTAMP_FIELD_DESC:TField = new TField("timestamp", TType.I64, 2);
    private static const LATITUDE_FIELD_DESC:TField = new TField("latitude", TType.DOUBLE, 3);
    private static const LONGITUDE_FIELD_DESC:TField = new TField("longitude", TType.DOUBLE, 4);
    private static const ALTITUDE_FIELD_DESC:TField = new TField("altitude", TType.DOUBLE, 5);
    private static const CAMERA_MAKE_FIELD_DESC:TField = new TField("cameraMake", TType.STRING, 6);
    private static const CAMERA_MODEL_FIELD_DESC:TField = new TField("cameraModel", TType.STRING, 7);
    private static const CLIENT_WILL_INDEX_FIELD_DESC:TField = new TField("clientWillIndex", TType.BOOL, 8);
    private static const RECO_TYPE_FIELD_DESC:TField = new TField("recoType", TType.STRING, 9);
    private static const FILE_NAME_FIELD_DESC:TField = new TField("fileName", TType.STRING, 10);
    private static const ATTACHMENT_FIELD_DESC:TField = new TField("attachment", TType.BOOL, 11);
    private static const APPLICATION_DATA_FIELD_DESC:TField = new TField("applicationData", TType.STRUCT, 12);

    private var _sourceURL:String;
    public static const SOURCEURL:int = 1;
    private var _timestamp:BigInteger;
    public static const TIMESTAMP:int = 2;
    private var _latitude:Number;
    public static const LATITUDE:int = 3;
    private var _longitude:Number;
    public static const LONGITUDE:int = 4;
    private var _altitude:Number;
    public static const ALTITUDE:int = 5;
    private var _cameraMake:String;
    public static const CAMERAMAKE:int = 6;
    private var _cameraModel:String;
    public static const CAMERAMODEL:int = 7;
    private var _clientWillIndex:Boolean;
    public static const CLIENTWILLINDEX:int = 8;
    private var _recoType:String;
    public static const RECOTYPE:int = 9;
    private var _fileName:String;
    public static const FILENAME:int = 10;
    private var _attachment:Boolean;
    public static const ATTACHMENT:int = 11;
    private var _applicationData:LazyMap;
    public static const APPLICATIONDATA:int = 12;

    private var __isset_timestamp:Boolean = false;
    private var __isset_latitude:Boolean = false;
    private var __isset_longitude:Boolean = false;
    private var __isset_altitude:Boolean = false;
    private var __isset_clientWillIndex:Boolean = false;
    private var __isset_attachment:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[SOURCEURL] = new FieldMetaData("sourceURL", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[TIMESTAMP] = new FieldMetaData("timestamp", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I64));
      metaDataMap[LATITUDE] = new FieldMetaData("latitude", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.DOUBLE));
      metaDataMap[LONGITUDE] = new FieldMetaData("longitude", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.DOUBLE));
      metaDataMap[ALTITUDE] = new FieldMetaData("altitude", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.DOUBLE));
      metaDataMap[CAMERAMAKE] = new FieldMetaData("cameraMake", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[CAMERAMODEL] = new FieldMetaData("cameraModel", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[CLIENTWILLINDEX] = new FieldMetaData("clientWillIndex", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[RECOTYPE] = new FieldMetaData("recoType", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[FILENAME] = new FieldMetaData("fileName", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[ATTACHMENT] = new FieldMetaData("attachment", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[APPLICATIONDATA] = new FieldMetaData("applicationData", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, LazyMap));
    }
    {
      FieldMetaData.addStructMetaDataMap(ResourceAttributes, metaDataMap);
    }

    public function ResourceAttributes() {
    }

    public function get sourceURL():String {
      return this._sourceURL;
    }

    public function set sourceURL(sourceURL:String):void {
      this._sourceURL = sourceURL;
    }

    public function unsetSourceURL():void {
      this.sourceURL = null;
    }

    // Returns true if field sourceURL is set (has been assigned a value) and false otherwise
    public function isSetSourceURL():Boolean {
      return this.sourceURL != null;
    }

    public function get timestamp():BigInteger {
      return this._timestamp;
    }

    public function set timestamp(timestamp:BigInteger):void {
      this._timestamp = timestamp;
      this.__isset_timestamp = true;
    }

    public function unsetTimestamp():void {
      this.__isset_timestamp = false;
    }

    // Returns true if field timestamp is set (has been assigned a value) and false otherwise
    public function isSetTimestamp():Boolean {
      return this.__isset_timestamp;
    }

    public function get latitude():Number {
      return this._latitude;
    }

    public function set latitude(latitude:Number):void {
      this._latitude = latitude;
      this.__isset_latitude = true;
    }

    public function unsetLatitude():void {
      this.__isset_latitude = false;
    }

    // Returns true if field latitude is set (has been assigned a value) and false otherwise
    public function isSetLatitude():Boolean {
      return this.__isset_latitude;
    }

    public function get longitude():Number {
      return this._longitude;
    }

    public function set longitude(longitude:Number):void {
      this._longitude = longitude;
      this.__isset_longitude = true;
    }

    public function unsetLongitude():void {
      this.__isset_longitude = false;
    }

    // Returns true if field longitude is set (has been assigned a value) and false otherwise
    public function isSetLongitude():Boolean {
      return this.__isset_longitude;
    }

    public function get altitude():Number {
      return this._altitude;
    }

    public function set altitude(altitude:Number):void {
      this._altitude = altitude;
      this.__isset_altitude = true;
    }

    public function unsetAltitude():void {
      this.__isset_altitude = false;
    }

    // Returns true if field altitude is set (has been assigned a value) and false otherwise
    public function isSetAltitude():Boolean {
      return this.__isset_altitude;
    }

    public function get cameraMake():String {
      return this._cameraMake;
    }

    public function set cameraMake(cameraMake:String):void {
      this._cameraMake = cameraMake;
    }

    public function unsetCameraMake():void {
      this.cameraMake = null;
    }

    // Returns true if field cameraMake is set (has been assigned a value) and false otherwise
    public function isSetCameraMake():Boolean {
      return this.cameraMake != null;
    }

    public function get cameraModel():String {
      return this._cameraModel;
    }

    public function set cameraModel(cameraModel:String):void {
      this._cameraModel = cameraModel;
    }

    public function unsetCameraModel():void {
      this.cameraModel = null;
    }

    // Returns true if field cameraModel is set (has been assigned a value) and false otherwise
    public function isSetCameraModel():Boolean {
      return this.cameraModel != null;
    }

    public function get clientWillIndex():Boolean {
      return this._clientWillIndex;
    }

    public function set clientWillIndex(clientWillIndex:Boolean):void {
      this._clientWillIndex = clientWillIndex;
      this.__isset_clientWillIndex = true;
    }

    public function unsetClientWillIndex():void {
      this.__isset_clientWillIndex = false;
    }

    // Returns true if field clientWillIndex is set (has been assigned a value) and false otherwise
    public function isSetClientWillIndex():Boolean {
      return this.__isset_clientWillIndex;
    }

    public function get recoType():String {
      return this._recoType;
    }

    public function set recoType(recoType:String):void {
      this._recoType = recoType;
    }

    public function unsetRecoType():void {
      this.recoType = null;
    }

    // Returns true if field recoType is set (has been assigned a value) and false otherwise
    public function isSetRecoType():Boolean {
      return this.recoType != null;
    }

    public function get fileName():String {
      return this._fileName;
    }

    public function set fileName(fileName:String):void {
      this._fileName = fileName;
    }

    public function unsetFileName():void {
      this.fileName = null;
    }

    // Returns true if field fileName is set (has been assigned a value) and false otherwise
    public function isSetFileName():Boolean {
      return this.fileName != null;
    }

    public function get attachment():Boolean {
      return this._attachment;
    }

    public function set attachment(attachment:Boolean):void {
      this._attachment = attachment;
      this.__isset_attachment = true;
    }

    public function unsetAttachment():void {
      this.__isset_attachment = false;
    }

    // Returns true if field attachment is set (has been assigned a value) and false otherwise
    public function isSetAttachment():Boolean {
      return this.__isset_attachment;
    }

    public function get applicationData():LazyMap {
      return this._applicationData;
    }

    public function set applicationData(applicationData:LazyMap):void {
      this._applicationData = applicationData;
    }

    public function unsetApplicationData():void {
      this.applicationData = null;
    }

    // Returns true if field applicationData is set (has been assigned a value) and false otherwise
    public function isSetApplicationData():Boolean {
      return this.applicationData != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case SOURCEURL:
        if (value == null) {
          unsetSourceURL();
        } else {
          this.sourceURL = value;
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          this.timestamp = value;
        }
        break;

      case LATITUDE:
        if (value == null) {
          unsetLatitude();
        } else {
          this.latitude = value;
        }
        break;

      case LONGITUDE:
        if (value == null) {
          unsetLongitude();
        } else {
          this.longitude = value;
        }
        break;

      case ALTITUDE:
        if (value == null) {
          unsetAltitude();
        } else {
          this.altitude = value;
        }
        break;

      case CAMERAMAKE:
        if (value == null) {
          unsetCameraMake();
        } else {
          this.cameraMake = value;
        }
        break;

      case CAMERAMODEL:
        if (value == null) {
          unsetCameraModel();
        } else {
          this.cameraModel = value;
        }
        break;

      case CLIENTWILLINDEX:
        if (value == null) {
          unsetClientWillIndex();
        } else {
          this.clientWillIndex = value;
        }
        break;

      case RECOTYPE:
        if (value == null) {
          unsetRecoType();
        } else {
          this.recoType = value;
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFileName();
        } else {
          this.fileName = value;
        }
        break;

      case ATTACHMENT:
        if (value == null) {
          unsetAttachment();
        } else {
          this.attachment = value;
        }
        break;

      case APPLICATIONDATA:
        if (value == null) {
          unsetApplicationData();
        } else {
          this.applicationData = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case SOURCEURL:
        return this.sourceURL;
      case TIMESTAMP:
        return this.timestamp;
      case LATITUDE:
        return this.latitude;
      case LONGITUDE:
        return this.longitude;
      case ALTITUDE:
        return this.altitude;
      case CAMERAMAKE:
        return this.cameraMake;
      case CAMERAMODEL:
        return this.cameraModel;
      case CLIENTWILLINDEX:
        return this.clientWillIndex;
      case RECOTYPE:
        return this.recoType;
      case FILENAME:
        return this.fileName;
      case ATTACHMENT:
        return this.attachment;
      case APPLICATIONDATA:
        return this.applicationData;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case SOURCEURL:
        return isSetSourceURL();
      case TIMESTAMP:
        return isSetTimestamp();
      case LATITUDE:
        return isSetLatitude();
      case LONGITUDE:
        return isSetLongitude();
      case ALTITUDE:
        return isSetAltitude();
      case CAMERAMAKE:
        return isSetCameraMake();
      case CAMERAMODEL:
        return isSetCameraModel();
      case CLIENTWILLINDEX:
        return isSetClientWillIndex();
      case RECOTYPE:
        return isSetRecoType();
      case FILENAME:
        return isSetFileName();
      case ATTACHMENT:
        return isSetAttachment();
      case APPLICATIONDATA:
        return isSetApplicationData();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SOURCEURL:
            if (field.type == TType.STRING) {
              this.sourceURL = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TIMESTAMP:
            if (field.type == TType.I64) {
              this.timestamp = iprot.readI64();
              this.__isset_timestamp = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LATITUDE:
            if (field.type == TType.DOUBLE) {
              this.latitude = iprot.readDouble();
              this.__isset_latitude = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LONGITUDE:
            if (field.type == TType.DOUBLE) {
              this.longitude = iprot.readDouble();
              this.__isset_longitude = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ALTITUDE:
            if (field.type == TType.DOUBLE) {
              this.altitude = iprot.readDouble();
              this.__isset_altitude = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CAMERAMAKE:
            if (field.type == TType.STRING) {
              this.cameraMake = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CAMERAMODEL:
            if (field.type == TType.STRING) {
              this.cameraModel = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CLIENTWILLINDEX:
            if (field.type == TType.BOOL) {
              this.clientWillIndex = iprot.readBool();
              this.__isset_clientWillIndex = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case RECOTYPE:
            if (field.type == TType.STRING) {
              this.recoType = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FILENAME:
            if (field.type == TType.STRING) {
              this.fileName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ATTACHMENT:
            if (field.type == TType.BOOL) {
              this.attachment = iprot.readBool();
              this.__isset_attachment = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case APPLICATIONDATA:
            if (field.type == TType.STRUCT) {
              this.applicationData = new LazyMap();
              this.applicationData.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sourceURL != null) {
        if (isSetSourceURL()) {
          oprot.writeFieldBegin(SOURCE_URL_FIELD_DESC);
          oprot.writeString(this.sourceURL);
          oprot.writeFieldEnd();
        }
      }
      if (isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(this.timestamp);
        oprot.writeFieldEnd();
      }
      if (isSetLatitude()) {
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeDouble(this.latitude);
        oprot.writeFieldEnd();
      }
      if (isSetLongitude()) {
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeDouble(this.longitude);
        oprot.writeFieldEnd();
      }
      if (isSetAltitude()) {
        oprot.writeFieldBegin(ALTITUDE_FIELD_DESC);
        oprot.writeDouble(this.altitude);
        oprot.writeFieldEnd();
      }
      if (this.cameraMake != null) {
        if (isSetCameraMake()) {
          oprot.writeFieldBegin(CAMERA_MAKE_FIELD_DESC);
          oprot.writeString(this.cameraMake);
          oprot.writeFieldEnd();
        }
      }
      if (this.cameraModel != null) {
        if (isSetCameraModel()) {
          oprot.writeFieldBegin(CAMERA_MODEL_FIELD_DESC);
          oprot.writeString(this.cameraModel);
          oprot.writeFieldEnd();
        }
      }
      if (isSetClientWillIndex()) {
        oprot.writeFieldBegin(CLIENT_WILL_INDEX_FIELD_DESC);
        oprot.writeBool(this.clientWillIndex);
        oprot.writeFieldEnd();
      }
      if (this.recoType != null) {
        if (isSetRecoType()) {
          oprot.writeFieldBegin(RECO_TYPE_FIELD_DESC);
          oprot.writeString(this.recoType);
          oprot.writeFieldEnd();
        }
      }
      if (this.fileName != null) {
        if (isSetFileName()) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(this.fileName);
          oprot.writeFieldEnd();
        }
      }
      if (isSetAttachment()) {
        oprot.writeFieldBegin(ATTACHMENT_FIELD_DESC);
        oprot.writeBool(this.attachment);
        oprot.writeFieldEnd();
      }
      if (this.applicationData != null) {
        if (isSetApplicationData()) {
          oprot.writeFieldBegin(APPLICATION_DATA_FIELD_DESC);
          this.applicationData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("ResourceAttributes(");
      var first:Boolean = true;

      if (isSetSourceURL()) {
        ret += "sourceURL:";
        if (this.sourceURL == null) {
          ret += "null";
        } else {
          ret += this.sourceURL;
        }
        first = false;
      }
      if (isSetTimestamp()) {
        if (!first) ret +=  ", ";
        ret += "timestamp:";
        ret += this.timestamp;
        first = false;
      }
      if (isSetLatitude()) {
        if (!first) ret +=  ", ";
        ret += "latitude:";
        ret += this.latitude;
        first = false;
      }
      if (isSetLongitude()) {
        if (!first) ret +=  ", ";
        ret += "longitude:";
        ret += this.longitude;
        first = false;
      }
      if (isSetAltitude()) {
        if (!first) ret +=  ", ";
        ret += "altitude:";
        ret += this.altitude;
        first = false;
      }
      if (isSetCameraMake()) {
        if (!first) ret +=  ", ";
        ret += "cameraMake:";
        if (this.cameraMake == null) {
          ret += "null";
        } else {
          ret += this.cameraMake;
        }
        first = false;
      }
      if (isSetCameraModel()) {
        if (!first) ret +=  ", ";
        ret += "cameraModel:";
        if (this.cameraModel == null) {
          ret += "null";
        } else {
          ret += this.cameraModel;
        }
        first = false;
      }
      if (isSetClientWillIndex()) {
        if (!first) ret +=  ", ";
        ret += "clientWillIndex:";
        ret += this.clientWillIndex;
        first = false;
      }
      if (isSetRecoType()) {
        if (!first) ret +=  ", ";
        ret += "recoType:";
        if (this.recoType == null) {
          ret += "null";
        } else {
          ret += this.recoType;
        }
        first = false;
      }
      if (isSetFileName()) {
        if (!first) ret +=  ", ";
        ret += "fileName:";
        if (this.fileName == null) {
          ret += "null";
        } else {
          ret += this.fileName;
        }
        first = false;
      }
      if (isSetAttachment()) {
        if (!first) ret +=  ", ";
        ret += "attachment:";
        ret += this.attachment;
        first = false;
      }
      if (isSetApplicationData()) {
        if (!first) ret +=  ", ";
        ret += "applicationData:";
        if (this.applicationData == null) {
          ret += "null";
        } else {
          ret += this.applicationData;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
