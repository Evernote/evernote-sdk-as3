/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  /**
   * A structure that wraps a map of name/value pairs whose values are not
   * always present in the structure in order to reduce space when obtaining
   * batches of entities that contain the map.
   * 
   * When the server provides the client with a LazyMap, it will fill in either
   * the keysOnly field or the fullMap field, but never both, based on the API
   * and parameters.
   * 
   * When a client provides a LazyMap to the server as part of an update to
   * an object, the server will only update the LazyMap if the fullMap field is
   * set. If the fullMap field is not set, the server will not make any changes
   * to the map.
   * 
   * Check the API documentation of the individual calls involving the LazyMap
   * for full details including the constraints of the names and values of the
   * map.
   * 
   * <dl>
   * <dt>keysOnly</dt>
   *   <dd>The set of keys for the map.  This field is ignored by the
   *       server when set.
   *   </dd>
   * 
   * <dt>fullMap</dt>
   *   <dd>The complete map, including all keys and values.
   *   </dd>
   * </dl>
   */
  public class LazyMap implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("LazyMap");
    private static const KEYS_ONLY_FIELD_DESC:TField = new TField("keysOnly", TType.SET, 1);
    private static const FULL_MAP_FIELD_DESC:TField = new TField("fullMap", TType.MAP, 2);

    private var _keysOnly:Set;
    public static const KEYSONLY:int = 1;
    private var _fullMap:Dictionary;
    public static const FULLMAP:int = 2;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[KEYSONLY] = new FieldMetaData("keysOnly", TFieldRequirementType.OPTIONAL, 
          new SetMetaData(TType.SET, 
              new FieldValueMetaData(TType.STRING)));
      metaDataMap[FULLMAP] = new FieldMetaData("fullMap", TFieldRequirementType.OPTIONAL, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING)));
    }
    {
      FieldMetaData.addStructMetaDataMap(LazyMap, metaDataMap);
    }

    public function LazyMap() {
    }

    public function get keysOnly():Set {
      return this._keysOnly;
    }

    public function set keysOnly(keysOnly:Set):void {
      this._keysOnly = keysOnly;
    }

    public function unsetKeysOnly():void {
      this.keysOnly = null;
    }

    // Returns true if field keysOnly is set (has been assigned a value) and false otherwise
    public function isSetKeysOnly():Boolean {
      return this.keysOnly != null;
    }

    public function get fullMap():Dictionary {
      return this._fullMap;
    }

    public function set fullMap(fullMap:Dictionary):void {
      this._fullMap = fullMap;
    }

    public function unsetFullMap():void {
      this.fullMap = null;
    }

    // Returns true if field fullMap is set (has been assigned a value) and false otherwise
    public function isSetFullMap():Boolean {
      return this.fullMap != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case KEYSONLY:
        if (value == null) {
          unsetKeysOnly();
        } else {
          this.keysOnly = value;
        }
        break;

      case FULLMAP:
        if (value == null) {
          unsetFullMap();
        } else {
          this.fullMap = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case KEYSONLY:
        return this.keysOnly;
      case FULLMAP:
        return this.fullMap;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case KEYSONLY:
        return isSetKeysOnly();
      case FULLMAP:
        return isSetFullMap();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEYSONLY:
            if (field.type == TType.SET) {
              {
                var _set77:TSet = iprot.readSetBegin();
                this.keysOnly = new Set();
                for (var _i78:int = 0; _i78 < _set77.size; ++_i78)
                {
                  var _elem79:String;
                  _elem79 = iprot.readString();
                  this.keysOnly.add(_elem79);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FULLMAP:
            if (field.type == TType.MAP) {
              {
                var _map80:TMap = iprot.readMapBegin();
                this.fullMap = new Dictionary();
                for (var _i81:int = 0; _i81 < _map80.size; ++_i81)
                {
                  var _key82:String;
                  var _val83:String;
                  _key82 = iprot.readString();
                  _val83 = iprot.readString();
                  this.fullMap[_key82] = _val83;
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keysOnly != null) {
        if (isSetKeysOnly()) {
          oprot.writeFieldBegin(KEYS_ONLY_FIELD_DESC);
          {
            oprot.writeSetBegin(new TSet(TType.STRING, this.keysOnly.size));
            for each (var elem84:* in this.keysOnly.toArray())            {
              oprot.writeString(elem84);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.fullMap != null) {
        if (isSetFullMap()) {
          oprot.writeFieldBegin(FULL_MAP_FIELD_DESC);
          {
            var _sizeCounter86:int = 0;
            for (var _key85:* in this.fullMap) {
              _sizeCounter86++;
            }
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _sizeCounter86));
            for (var elem87:* in this.fullMap)            {
              oprot.writeString(elem87);
              oprot.writeString(this.fullMap[elem87]);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("LazyMap(");
      var first:Boolean = true;

      if (isSetKeysOnly()) {
        ret += "keysOnly:";
        if (this.keysOnly == null) {
          ret += "null";
        } else {
          ret += this.keysOnly;
        }
        first = false;
      }
      if (isSetFullMap()) {
        if (!first) ret +=  ", ";
        ret += "fullMap:";
        if (this.fullMap == null) {
          ret += "null";
        } else {
          ret += this.fullMap;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
